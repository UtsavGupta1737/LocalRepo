From: <Saved by Blink>
Snapshot-Content-Location: https://docs.python.org/3/library/tkinter.html?highlight=tkinter#module-tkinter
Subject: =?utf-8?Q?tkinter=20=E2=80=94=20Python=20interface=20to=20Tcl/Tk=20=E2=80?=
 =?utf-8?Q?=94=20Python=203.11.0=20documentation?=
Date: Mon, 5 Dec 2022 11:50:05 -0000
MIME-Version: 1.0
Content-Type: multipart/related;
	type="text/html";
	boundary="----MultipartBoundary--jn3eWeiLvD2ixPXlFYsITIejnqnAUyrqq9roiv0fbI----"


------MultipartBoundary--jn3eWeiLvD2ixPXlFYsITIejnqnAUyrqq9roiv0fbI----
Content-Type: text/html
Content-ID: <frame-A9B78299DC6ABC8339BD122E6086DD8F@mhtml.blink>
Content-Transfer-Encoding: binary
Content-Location: https://docs.python.org/3/library/tkinter.html?highlight=tkinter#module-tkinter

<!DOCTYPE html><html><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8"><link rel="stylesheet" type="text/css" href="cid:css-7965ee78-bd6e-4200-958e-c35cce4cafc3@mhtml.blink" />
    
    <meta name="viewport" content="width=device-width, initial-scale=1.0"><meta name="generator" content="Docutils 0.17.1: http://docutils.sourceforge.net/">

    <title>tkinter — Python interface to Tcl/Tk — Python 3.11.0 documentation</title><meta name="viewport" content="width=device-width, initial-scale=1.0">
    
    <link rel="stylesheet" type="text/css" href="https://docs.python.org/3/_static/pygments.css">
    <link rel="stylesheet" type="text/css" href="https://docs.python.org/3/_static/pydoctheme.css?2022.1">
    
    
    
    
    
    
    
    
    <link rel="search" type="application/opensearchdescription+xml" title="Search within Python 3.11.0 documentation" href="https://docs.python.org/3/_static/opensearch.xml">
    <link rel="author" title="About these documents" href="https://docs.python.org/3/about.html">
    <link rel="index" title="Index" href="https://docs.python.org/3/genindex.html">
    <link rel="search" title="Search" href="https://docs.python.org/3/search.html">
    <link rel="copyright" title="Copyright" href="https://docs.python.org/3/copyright.html">
    <link rel="next" title="tkinter.colorchooser — Color choosing dialog" href="https://docs.python.org/3/library/tkinter.colorchooser.html">
    <link rel="prev" title="Graphical User Interfaces with Tk" href="https://docs.python.org/3/library/tk.html">
    <link rel="canonical" href="https://docs.python.org/3/library/tkinter.html">
    
      
    

    
    
<link rel="shortcut icon" type="image/png" href="https://docs.python.org/3/_static/py.svg">
            
             

  </head>
<body>
<div class="mobile-nav">
    <input type="checkbox" id="menuToggler" class="toggler__input" aria-controls="navigation" aria-pressed="false" aria-expanded="false" role="button" aria-label="Menu">
    <label for="menuToggler" class="toggler__label">
        <span></span>
    </label>
    <nav class="nav-content" role="navigation">
         <a href="https://www.python.org/" class="nav-logo">
             <img src="https://docs.python.org/3/_static/py.svg" alt="Logo">
         </a>
        <div class="version_switcher_placeholder"><select id="version_select"><option value="3.12">dev (3.12)</option><option value="3.11" selected="selected">3.11.0</option><option value="3.10">3.10</option><option value="3.9">3.9</option><option value="3.8">3.8</option><option value="3.7">3.7</option><option value="3.6">3.6</option><option value="3.5">3.5</option><option value="2.7">2.7</option></select></div>
        <form role="search" class="search" action="https://docs.python.org/3/search.html" method="get">
            <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" class="search-icon">
                <path fill-rule="nonzero" d="M15.5 14h-.79l-.28-.27a6.5 6.5 0 001.48-5.34c-.47-2.78-2.79-5-5.59-5.34a6.505 6.505 0 00-7.27 7.27c.34 2.8 2.56 5.12 5.34 5.59a6.5 6.5 0 005.34-1.48l.27.28v.79l4.25 4.25c.41.41 1.08.41 1.49 0 .41-.41.41-1.08 0-1.49L15.5 14zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z" fill="#444"></path>
            </svg>
            <input type="text" name="q" aria-label="Quick search">
            <input type="submit" value="Go">
        </form>
    </nav>
    <div class="menu-wrapper">
        <nav class="menu" role="navigation" aria-label="main navigation" tabindex="-1">
            <div class="language_switcher_placeholder"><select id="language_select"><option value="en" selected="selected">English</option><option value="es">Spanish</option><option value="fr">French</option><option value="ja">Japanese</option><option value="ko">Korean</option><option value="pt-br">Brazilian Portuguese</option><option value="zh-cn">Simplified Chinese</option><option value="zh-tw">Traditional Chinese</option></select></div>
  <div>
    <h3><a href="https://docs.python.org/3/contents.html">Table of Contents</a></h3>
    <ul>
<li><a class="reference internal" href="https://docs.python.org/3/library/tkinter.html?highlight=tkinter#"><code class="xref py py-mod docutils literal notranslate"><span class="pre">tkinter</span></code> — Python interface to Tcl/Tk</a><ul>
<li><a class="reference internal" href="https://docs.python.org/3/library/tkinter.html?highlight=tkinter#architecture">Architecture</a></li>
<li><a class="reference internal" href="https://docs.python.org/3/library/tkinter.html?highlight=tkinter#tkinter-modules">Tkinter Modules</a></li>
<li><a class="reference internal" href="https://docs.python.org/3/library/tkinter.html?highlight=tkinter#tkinter-life-preserver">Tkinter Life Preserver</a><ul>
<li><a class="reference internal" href="https://docs.python.org/3/library/tkinter.html?highlight=tkinter#a-hello-world-program">A Hello World Program</a></li>
<li><a class="reference internal" href="https://docs.python.org/3/library/tkinter.html?highlight=tkinter#important-tk-concepts">Important Tk Concepts</a></li>
<li><a class="reference internal" href="https://docs.python.org/3/library/tkinter.html?highlight=tkinter#understanding-how-tkinter-wraps-tcl-tk">Understanding How Tkinter Wraps Tcl/Tk</a></li>
<li><a class="reference internal" href="https://docs.python.org/3/library/tkinter.html?highlight=tkinter#how-do-i-what-option-does">How do I…? What option does…?</a></li>
<li><a class="reference internal" href="https://docs.python.org/3/library/tkinter.html?highlight=tkinter#navigating-the-tcl-tk-reference-manual">Navigating the Tcl/Tk Reference Manual</a></li>
</ul>
</li>
<li><a class="reference internal" href="https://docs.python.org/3/library/tkinter.html?highlight=tkinter#threading-model">Threading model</a></li>
<li><a class="reference internal" href="https://docs.python.org/3/library/tkinter.html?highlight=tkinter#handy-reference">Handy Reference</a><ul>
<li><a class="reference internal" href="https://docs.python.org/3/library/tkinter.html?highlight=tkinter#setting-options">Setting Options</a></li>
<li><a class="reference internal" href="https://docs.python.org/3/library/tkinter.html?highlight=tkinter#the-packer">The Packer</a></li>
<li><a class="reference internal" href="https://docs.python.org/3/library/tkinter.html?highlight=tkinter#packer-options">Packer Options</a></li>
<li><a class="reference internal" href="https://docs.python.org/3/library/tkinter.html?highlight=tkinter#coupling-widget-variables">Coupling Widget Variables</a></li>
<li><a class="reference internal" href="https://docs.python.org/3/library/tkinter.html?highlight=tkinter#the-window-manager">The Window Manager</a></li>
<li><a class="reference internal" href="https://docs.python.org/3/library/tkinter.html?highlight=tkinter#tk-option-data-types">Tk Option Data Types</a></li>
<li><a class="reference internal" href="https://docs.python.org/3/library/tkinter.html?highlight=tkinter#bindings-and-events">Bindings and Events</a></li>
<li><a class="reference internal" href="https://docs.python.org/3/library/tkinter.html?highlight=tkinter#the-index-parameter">The index Parameter</a></li>
<li><a class="reference internal" href="https://docs.python.org/3/library/tkinter.html?highlight=tkinter#images">Images</a></li>
</ul>
</li>
<li><a class="reference internal" href="https://docs.python.org/3/library/tkinter.html?highlight=tkinter#file-handlers">File Handlers</a></li>
</ul>
</li>
</ul>

  </div>
  <div>
    <h4>Previous topic</h4>
    <p class="topless"><a href="https://docs.python.org/3/library/tk.html" title="previous chapter">Graphical User Interfaces with Tk</a></p>
  </div>
  <div>
    <h4>Next topic</h4>
    <p class="topless"><a href="https://docs.python.org/3/library/tkinter.colorchooser.html" title="next chapter"><code class="xref py py-mod docutils literal notranslate"><span class="pre">tkinter.colorchooser</span></code> — Color choosing dialog</a></p>
  </div>
  <div role="note" aria-label="source link">
    <h3>This Page</h3>
    <ul class="this-page-menu">
      <li><a href="https://docs.python.org/3/bugs.html">Report a Bug</a></li>
      <li>
        <a href="https://github.com/python/cpython/blob/main/Doc/library/tkinter.rst" rel="nofollow">Show Source
        </a>
      </li>
    </ul>
  </div>
        </nav>
    </div>
</div>

  
    <div class="related" role="navigation" aria-label="related navigation">
      <h3>Navigation</h3>
      <ul>
        <li class="right" style="margin-right: 10px">
          <a href="https://docs.python.org/3/genindex.html" title="General Index" accesskey="I">index</a></li>
        <li class="right">
          <a href="https://docs.python.org/3/py-modindex.html" title="Python Module Index">modules</a> |</li>
        <li class="right">
          <a href="https://docs.python.org/3/library/tkinter.colorchooser.html" title="tkinter.colorchooser — Color choosing dialog" accesskey="N">next</a> |</li>
        <li class="right">
          <a href="https://docs.python.org/3/library/tk.html" title="Graphical User Interfaces with Tk" accesskey="P">previous</a> |</li>

          <li><img src="https://docs.python.org/3/_static/py.svg" alt="python logo" style="vertical-align: middle; margin-top: -1px"></li>
          <li><a href="https://www.python.org/">Python</a> »</li>
          <li class="switchers">
            <div class="language_switcher_placeholder"><select id="language_select"><option value="en" selected="selected">English</option><option value="es">Spanish</option><option value="fr">French</option><option value="ja">Japanese</option><option value="ko">Korean</option><option value="pt-br">Brazilian Portuguese</option><option value="zh-cn">Simplified Chinese</option><option value="zh-tw">Traditional Chinese</option></select></div>
            <div class="version_switcher_placeholder"><select id="version_select"><option value="3.12">dev (3.12)</option><option value="3.11" selected="selected">3.11.0</option><option value="3.10">3.10</option><option value="3.9">3.9</option><option value="3.8">3.8</option><option value="3.7">3.7</option><option value="3.6">3.6</option><option value="3.5">3.5</option><option value="2.7">2.7</option></select></div>
          </li>
          <li>
              
          </li>
    <li id="cpython-language-and-version">
      <a href="https://docs.python.org/3/index.html">3.11.0 Documentation</a> »
    </li>

          <li class="nav-item nav-item-1"><a href="https://docs.python.org/3/library/index.html">The Python Standard Library</a> »</li>
          <li class="nav-item nav-item-2"><a href="https://docs.python.org/3/library/tk.html" accesskey="U">Graphical User Interfaces with Tk</a> »</li>
        <li class="nav-item nav-item-this"><a href="https://docs.python.org/3/library/tkinter.html?highlight=tkinter"><code class="xref py py-mod docutils literal notranslate"><span class="pre">tkinter</span></code> — Python interface to Tcl/Tk</a></li>
                <li class="right">
                    

    <div class="inline-search" role="search">
        <form class="inline-search" action="https://docs.python.org/3/search.html" method="get">
          <input placeholder="Quick search" aria-label="Quick search" type="text" name="q">
          <input type="submit" value="Go">
          
          
        </form>
    </div>
                     |
                </li>
            
      </ul>
    </div>    

    <div class="document">
      <div class="documentwrapper">
        <div class="bodywrapper">
          <div class="body" role="main">
            
  <section id="module-tkinter">
<span id="tkinter-python-interface-to-tcl-tk"></span><h1><a class="reference internal" href="https://docs.python.org/3/library/tkinter.html?highlight=tkinter#module-tkinter" title="tkinter: Interface to Tcl/Tk for graphical user interfaces"><code class="xref py py-mod docutils literal notranslate"><span class="pre"><span class="highlighted">tkinter</span></span></code></a> — Python interface to Tcl/Tk<a class="headerlink" href="https://docs.python.org/3/library/tkinter.html?highlight=tkinter#module-tkinter" title="Permalink to this headline">¶</a></h1>
<p><strong>Source code:</strong> <a class="reference external" href="https://github.com/python/cpython/tree/3.11/Lib/tkinter/__init__.py">Lib/<span class="highlighted">tkinter</span>/__init__.py</a></p>
<hr class="docutils">
<p>The <a class="reference internal" href="https://docs.python.org/3/library/tkinter.html?highlight=tkinter#module-tkinter" title="tkinter: Interface to Tcl/Tk for graphical user interfaces"><code class="xref py py-mod docutils literal notranslate"><span class="pre"><span class="highlighted">tkinter</span></span></code></a> package (“Tk interface”) is the standard Python interface to
the Tcl/Tk GUI toolkit.  Both Tk and <a class="reference internal" href="https://docs.python.org/3/library/tkinter.html?highlight=tkinter#module-tkinter" title="tkinter: Interface to Tcl/Tk for graphical user interfaces"><code class="xref py py-mod docutils literal notranslate"><span class="pre"><span class="highlighted">tkinter</span></span></code></a> are available on most Unix
platforms, including macOS, as well as on Windows systems.</p>
<p>Running <code class="docutils literal notranslate"><span class="pre">python</span> <span class="pre">-m</span> <span class="pre"><span class="highlighted">tkinter</span></span></code> from the command line should open a window
demonstrating a simple Tk interface, letting you know that <a class="reference internal" href="https://docs.python.org/3/library/tkinter.html?highlight=tkinter#module-tkinter" title="tkinter: Interface to Tcl/Tk for graphical user interfaces"><code class="xref py py-mod docutils literal notranslate"><span class="pre"><span class="highlighted">tkinter</span></span></code></a> is
properly installed on your system, and also showing what version of Tcl/Tk is
installed, so you can read the Tcl/Tk documentation specific to that version.</p>
<p><span class="highlighted">Tkinter</span> supports a range of Tcl/Tk versions, built either with or
without thread support. The official Python binary release bundles Tcl/Tk 8.6
threaded. See the source code for the <code class="xref py py-mod docutils literal notranslate"><span class="pre">_tkinter</span></code> module
for more information about supported versions.</p>
<p><span class="highlighted">Tkinter</span> is not a thin wrapper, but adds a fair amount of its own logic to
make the experience more pythonic. This documentation will concentrate on these
additions and changes, and refer to the official Tcl/Tk documentation for
details that are unchanged.</p>
<div class="admonition note">
<p class="admonition-title">Note</p>
<p>Tcl/Tk 8.5 (2007) introduced a modern set of themed user interface components
along with a new API to use them. Both old and new APIs are still available.
Most documentation you will find online still uses the old API and
can be woefully outdated.</p>
</div>
<div class="admonition seealso">
<p class="admonition-title">See also</p>
<ul class="simple">
<li><dl class="simple">
<dt><a class="reference external" href="https://tkdocs.com/">TkDocs</a></dt><dd><p>Extensive tutorial on creating user interfaces with <span class="highlighted">Tkinter</span>.  Explains key concepts,
and illustrates recommended approaches using the modern API.</p>
</dd>
</dl>
</li>
<li><dl class="simple">
<dt><a class="reference external" href="https://www.tkdocs.com/shipman/"><span class="highlighted">Tkinter</span> 8.5 reference: a GUI for Python</a></dt><dd><p>Reference documentation for <span class="highlighted">Tkinter</span> 8.5 detailing available classes, methods, and options.</p>
</dd>
</dl>
</li>
</ul>
<p>Tcl/Tk Resources:</p>
<ul class="simple">
<li><dl class="simple">
<dt><a class="reference external" href="https://www.tcl.tk/man/tcl8.6/TkCmd/contents.htm">Tk commands</a></dt><dd><p>Comprehensive reference to each of the underlying Tcl/Tk commands used by <span class="highlighted">Tkinter</span>.</p>
</dd>
</dl>
</li>
<li><dl class="simple">
<dt><a class="reference external" href="https://www.tcl.tk/">Tcl/Tk Home Page</a></dt><dd><p>Additional documentation, and links to Tcl/Tk core development.</p>
</dd>
</dl>
</li>
</ul>
<p>Books:</p>
<ul class="simple">
<li><dl class="simple">
<dt><a class="reference external" href="https://tkdocs.com/book.html">Modern <span class="highlighted">Tkinter</span> for Busy Python Developers</a></dt><dd><p>By Mark Roseman. (ISBN 978-1999149567)</p>
</dd>
</dl>
</li>
<li><dl class="simple">
<dt><a class="reference external" href="https://www.packtpub.com/product/python-gui-programming-with-tkinter/9781788835886">Python and <span class="highlighted">Tkinter</span> Programming</a></dt><dd><p>By Alan Moore. (ISBN 978-1788835886)</p>
</dd>
</dl>
</li>
<li><dl class="simple">
<dt><a class="reference external" href="https://learning-python.com/about-pp4e.html">Programming Python</a></dt><dd><p>By Mark Lutz; has excellent coverage of <span class="highlighted">Tkinter</span>. (ISBN 978-0596158101)</p>
</dd>
</dl>
</li>
<li><dl class="simple">
<dt><a class="reference external" href="https://www.amazon.com/exec/obidos/ASIN/032133633X">Tcl and the Tk Toolkit (2nd edition)</a></dt><dd><p>By John Ousterhout, inventor of Tcl/Tk, and Ken Jones; does not cover <span class="highlighted">Tkinter</span>. (ISBN 978-0321336330)</p>
</dd>
</dl>
</li>
</ul>
</div>
<section id="architecture">
<h2>Architecture<a class="headerlink" href="https://docs.python.org/3/library/tkinter.html?highlight=tkinter#architecture" title="Permalink to this headline">¶</a></h2>
<p>Tcl/Tk is not a single library but rather consists of a few distinct
modules, each with separate functionality and its own official
documentation. Python’s binary releases also ship an add-on module
together with it.</p>
<dl class="simple">
<dt>Tcl</dt><dd><p>Tcl is a dynamic interpreted programming language, just like Python. Though
it can be used on its own as a general-purpose programming language, it is
most commonly embedded into C applications as a scripting engine or an
interface to the Tk toolkit. The Tcl library has a C interface to
create and manage one or more instances of a Tcl interpreter, run Tcl
commands and scripts in those instances, and add custom commands
implemented in either Tcl or C. Each interpreter has an event queue,
and there are facilities to send events to it and process them.
Unlike Python, Tcl’s execution model is designed around cooperative
multitasking, and <span class="highlighted">Tkinter</span> bridges this difference
(see <a class="reference internal" href="https://docs.python.org/3/library/tkinter.html?highlight=tkinter#threading-model">Threading model</a> for details).</p>
</dd>
<dt>Tk</dt><dd><p>Tk is a <a class="reference external" href="https://wiki.tcl-lang.org/37432">Tcl package</a> implemented in C
that adds custom commands to create and manipulate GUI widgets. Each
<a class="reference internal" href="https://docs.python.org/3/library/tkinter.html?highlight=tkinter#tkinter.Tk" title="tkinter.Tk"><code class="xref py py-class docutils literal notranslate"><span class="pre">Tk</span></code></a> object embeds its own Tcl interpreter instance with Tk loaded into
it. Tk’s widgets are very customizable, though at the cost of a dated appearance.
Tk uses Tcl’s event queue to generate and process GUI events.</p>
</dd>
<dt>Ttk</dt><dd><p>Themed Tk (Ttk) is a newer family of Tk widgets that provide a much better
appearance on different platforms than many of the classic Tk widgets.
Ttk is distributed as part of Tk, starting with Tk version 8.5. Python
bindings are provided in a separate module, <a class="reference internal" href="https://docs.python.org/3/library/tkinter.ttk.html#module-tkinter.ttk" title="tkinter.ttk: Tk themed widget set"><code class="xref py py-mod docutils literal notranslate"><span class="pre"><span class="highlighted">tkinter</span>.ttk</span></code></a>.</p>
</dd>
</dl>
<p>Internally, Tk and Ttk use facilities of the underlying operating system,
i.e., Xlib on Unix/X11, Cocoa on macOS, GDI on Windows.</p>
<p>When your Python application uses a class in <span class="highlighted">Tkinter</span>, e.g., to create a widget,
the <a class="reference internal" href="https://docs.python.org/3/library/tkinter.html?highlight=tkinter#module-tkinter" title="tkinter: Interface to Tcl/Tk for graphical user interfaces"><code class="xref py py-mod docutils literal notranslate"><span class="pre"><span class="highlighted">tkinter</span></span></code></a> module first assembles a Tcl/Tk command string. It passes that
Tcl command string to an internal <code class="xref py py-mod docutils literal notranslate"><span class="pre">_tkinter</span></code> binary module, which then
calls the Tcl interpreter to evaluate it. The Tcl interpreter will then call into the
Tk and/or Ttk packages, which will in turn make calls to Xlib, Cocoa, or GDI.</p>
</section>
<section id="tkinter-modules">
<h2><span class="highlighted">Tkinter</span> Modules<a class="headerlink" href="https://docs.python.org/3/library/tkinter.html?highlight=tkinter#tkinter-modules" title="Permalink to this headline">¶</a></h2>
<p>Support for <span class="highlighted">Tkinter</span> is spread across several modules. Most applications will need the
main <a class="reference internal" href="https://docs.python.org/3/library/tkinter.html?highlight=tkinter#module-tkinter" title="tkinter: Interface to Tcl/Tk for graphical user interfaces"><code class="xref py py-mod docutils literal notranslate"><span class="pre"><span class="highlighted">tkinter</span></span></code></a> module, as well as the <a class="reference internal" href="https://docs.python.org/3/library/tkinter.ttk.html#module-tkinter.ttk" title="tkinter.ttk: Tk themed widget set"><code class="xref py py-mod docutils literal notranslate"><span class="pre">tkinter.ttk</span></code></a> module, which provides
the modern themed widget set and API:</p>
<div class="highlight-python3 notranslate" style="position: relative;"><div class="highlight"><pre><span></span><span class="kn">from</span> <span class="nn"><span class="highlighted">tkinter</span></span> <span class="kn">import</span> <span class="o">*</span>
<span class="kn">from</span> <span class="nn"><span class="highlighted">tkinter</span></span> <span class="kn">import</span> <span class="n">ttk</span>
</pre></div>
</div>
<dl class="py class">
<dt class="sig sig-object py" id="tkinter.Tk">
<em class="property"><span class="pre">class</span><span class="w"> </span></em><span class="sig-prename descclassname"><span class="pre"><span class="highlighted">tkinter</span>.</span></span><span class="sig-name descname"><span class="pre">Tk</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">screenName</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">baseName</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">className</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">'Tk'</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">useTk</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">True</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">sync</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">False</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">use</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em><span class="sig-paren">)</span><a class="headerlink" href="https://docs.python.org/3/library/tkinter.html?highlight=tkinter#tkinter.Tk" title="Permalink to this definition">¶</a></dt>
<dd><p>Construct a toplevel Tk widget, which is usually the main window of an
application, and initialize a Tcl interpreter for this widget.  Each
instance has its own associated Tcl interpreter.</p>
<p>The <a class="reference internal" href="https://docs.python.org/3/library/tkinter.html?highlight=tkinter#tkinter.Tk" title="tkinter.Tk"><code class="xref py py-class docutils literal notranslate"><span class="pre">Tk</span></code></a> class is typically instantiated using all default values.
However, the following keyword arguments are currently recognized:</p>
<dl>
<dt><em>screenName</em></dt><dd><p>When given (as a string), sets the <span class="target" id="index-0"></span><code class="xref std std-envvar docutils literal notranslate"><span class="pre">DISPLAY</span></code> environment
variable. (X11 only)</p>
</dd>
<dt><em>baseName</em></dt><dd><p>Name of the profile file.  By default, <em>baseName</em> is derived from the
program name (<code class="docutils literal notranslate"><span class="pre">sys.argv[0]</span></code>).</p>
</dd>
<dt><em>className</em></dt><dd><p>Name of the widget class.  Used as a profile file and also as the name
with which Tcl is invoked (<em>argv0</em> in <em>interp</em>).</p>
</dd>
<dt><em>useTk</em></dt><dd><p>If <code class="docutils literal notranslate"><span class="pre">True</span></code>, initialize the Tk subsystem.  The <a class="reference internal" href="https://docs.python.org/3/library/tkinter.html?highlight=tkinter#tkinter.Tcl" title="tkinter.Tcl"><code class="xref py py-func docutils literal notranslate"><span class="pre"><span class="highlighted">tkinter</span>.Tcl()</span></code></a>
function sets this to <code class="docutils literal notranslate"><span class="pre">False</span></code>.</p>
</dd>
<dt><em>sync</em></dt><dd><p>If <code class="docutils literal notranslate"><span class="pre">True</span></code>, execute all X server commands synchronously, so that errors
are reported immediately.  Can be used for debugging. (X11 only)</p>
</dd>
<dt><em>use</em></dt><dd><p>Specifies the <em>id</em> of the window in which to embed the application,
instead of it being created as an independent toplevel window. <em>id</em> must
be specified in the same way as the value for the -use option for
toplevel widgets (that is, it has a form like that returned by
<code class="xref py py-meth docutils literal notranslate"><span class="pre">winfo_id()</span></code>).</p>
<p>Note that on some platforms this will only work correctly if <em>id</em> refers
to a Tk frame or toplevel that has its -container option enabled.</p>
</dd>
</dl>
<p><a class="reference internal" href="https://docs.python.org/3/library/tkinter.html?highlight=tkinter#tkinter.Tk" title="tkinter.Tk"><code class="xref py py-class docutils literal notranslate"><span class="pre">Tk</span></code></a> reads and interprets profile files, named
<code class="file docutils literal notranslate"><span class="pre">.</span><em><span class="pre">className</span></em><span class="pre">.tcl</span></code> and <code class="file docutils literal notranslate"><span class="pre">.</span><em><span class="pre">baseName</span></em><span class="pre">.tcl</span></code>, into the Tcl
interpreter and calls <a class="reference internal" href="https://docs.python.org/3/library/functions.html#exec" title="exec"><code class="xref py py-func docutils literal notranslate"><span class="pre">exec()</span></code></a> on the contents of
<code class="file docutils literal notranslate"><span class="pre">.</span><em><span class="pre">className</span></em><span class="pre">.py</span></code> and <code class="file docutils literal notranslate"><span class="pre">.</span><em><span class="pre">baseName</span></em><span class="pre">.py</span></code>.  The path for the
profile files is the <span class="target" id="index-1"></span><code class="xref std std-envvar docutils literal notranslate"><span class="pre">HOME</span></code> environment variable or, if that
isn’t defined, then <a class="reference internal" href="https://docs.python.org/3/library/os.html#os.curdir" title="os.curdir"><code class="xref py py-attr docutils literal notranslate"><span class="pre">os.curdir</span></code></a>.</p>
<dl class="py attribute">
<dt class="sig sig-object py" id="tkinter.Tk.tk">
<span class="sig-name descname"><span class="pre">tk</span></span><a class="headerlink" href="https://docs.python.org/3/library/tkinter.html?highlight=tkinter#tkinter.Tk.tk" title="Permalink to this definition">¶</a></dt>
<dd><p>The Tk application object created by instantiating <a class="reference internal" href="https://docs.python.org/3/library/tkinter.html?highlight=tkinter#tkinter.Tk" title="tkinter.Tk"><code class="xref py py-class docutils literal notranslate"><span class="pre">Tk</span></code></a>.  This
provides access to the Tcl interpreter.  Each widget that is attached
the same instance of <a class="reference internal" href="https://docs.python.org/3/library/tkinter.html?highlight=tkinter#tkinter.Tk" title="tkinter.Tk"><code class="xref py py-class docutils literal notranslate"><span class="pre">Tk</span></code></a> has the same value for its <a class="reference internal" href="https://docs.python.org/3/library/tkinter.html?highlight=tkinter#tkinter.Tk.tk" title="tkinter.Tk.tk"><code class="xref py py-attr docutils literal notranslate"><span class="pre">tk</span></code></a>
attribute.</p>
</dd></dl>

<dl class="py attribute">
<dt class="sig sig-object py" id="tkinter.Tk.master">
<span class="sig-name descname"><span class="pre">master</span></span><a class="headerlink" href="https://docs.python.org/3/library/tkinter.html?highlight=tkinter#tkinter.Tk.master" title="Permalink to this definition">¶</a></dt>
<dd><p>The widget object that contains this widget.  For <a class="reference internal" href="https://docs.python.org/3/library/tkinter.html?highlight=tkinter#tkinter.Tk" title="tkinter.Tk"><code class="xref py py-class docutils literal notranslate"><span class="pre">Tk</span></code></a>, the
<em>master</em> is <a class="reference internal" href="https://docs.python.org/3/library/constants.html#None" title="None"><code class="xref py py-const docutils literal notranslate"><span class="pre">None</span></code></a> because it is the main window.  The terms
<em>master</em> and <em>parent</em> are similar and sometimes used interchangeably
as argument names; however, calling <code class="xref py py-meth docutils literal notranslate"><span class="pre">winfo_parent()</span></code> returns a
string of the widget name whereas <a class="reference internal" href="https://docs.python.org/3/library/tkinter.html?highlight=tkinter#tkinter.Tk.master" title="tkinter.Tk.master"><code class="xref py py-attr docutils literal notranslate"><span class="pre">master</span></code></a> returns the object.
<em>parent</em>/<em>child</em> reflects the tree-like relationship while
<em>master</em>/<em>slave</em> reflects the container structure.</p>
</dd></dl>

<dl class="py attribute">
<dt class="sig sig-object py" id="tkinter.Tk.children">
<span class="sig-name descname"><span class="pre">children</span></span><a class="headerlink" href="https://docs.python.org/3/library/tkinter.html?highlight=tkinter#tkinter.Tk.children" title="Permalink to this definition">¶</a></dt>
<dd><p>The immediate descendants of this widget as a <a class="reference internal" href="https://docs.python.org/3/library/stdtypes.html#dict" title="dict"><code class="xref py py-class docutils literal notranslate"><span class="pre">dict</span></code></a> with the
child widget names as the keys and the child instance objects as the
values.</p>
</dd></dl>

</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="tkinter.Tcl">
<span class="sig-prename descclassname"><span class="pre"><span class="highlighted">tkinter</span>.</span></span><span class="sig-name descname"><span class="pre">Tcl</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">screenName</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">baseName</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">className</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">'Tk'</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">useTk</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">False</span></span></em><span class="sig-paren">)</span><a class="headerlink" href="https://docs.python.org/3/library/tkinter.html?highlight=tkinter#tkinter.Tcl" title="Permalink to this definition">¶</a></dt>
<dd><p>The <a class="reference internal" href="https://docs.python.org/3/library/tkinter.html?highlight=tkinter#tkinter.Tcl" title="tkinter.Tcl"><code class="xref py py-func docutils literal notranslate"><span class="pre">Tcl()</span></code></a> function is a factory function which creates an object much like
that created by the <a class="reference internal" href="https://docs.python.org/3/library/tkinter.html?highlight=tkinter#tkinter.Tk" title="tkinter.Tk"><code class="xref py py-class docutils literal notranslate"><span class="pre">Tk</span></code></a> class, except that it does not initialize the Tk
subsystem.  This is most often useful when driving the Tcl interpreter in an
environment where one doesn’t want to create extraneous toplevel windows, or
where one cannot (such as Unix/Linux systems without an X server).  An object
created by the <a class="reference internal" href="https://docs.python.org/3/library/tkinter.html?highlight=tkinter#tkinter.Tcl" title="tkinter.Tcl"><code class="xref py py-func docutils literal notranslate"><span class="pre">Tcl()</span></code></a> object can have a Toplevel window created (and the Tk
subsystem initialized) by calling its <code class="xref py py-meth docutils literal notranslate"><span class="pre">loadtk()</span></code> method.</p>
</dd></dl>

<p>The modules that provide Tk support include:</p>
<dl class="simple">
<dt><a class="reference internal" href="https://docs.python.org/3/library/tkinter.html?highlight=tkinter#module-tkinter" title="tkinter: Interface to Tcl/Tk for graphical user interfaces"><code class="xref py py-mod docutils literal notranslate"><span class="pre"><span class="highlighted">tkinter</span></span></code></a></dt><dd><p>Main <span class="highlighted">Tkinter</span> module.</p>
</dd>
<dt><a class="reference internal" href="https://docs.python.org/3/library/tkinter.colorchooser.html#module-tkinter.colorchooser" title="tkinter.colorchooser: Color choosing dialog (Tk)"><code class="xref py py-mod docutils literal notranslate"><span class="pre"><span class="highlighted">tkinter</span>.colorchooser</span></code></a></dt><dd><p>Dialog to let the user choose a color.</p>
</dd>
<dt><a class="reference internal" href="https://docs.python.org/3/library/dialog.html#module-tkinter.commondialog" title="tkinter.commondialog: Tkinter base class for dialogs (Tk)"><code class="xref py py-mod docutils literal notranslate"><span class="pre"><span class="highlighted">tkinter</span>.commondialog</span></code></a></dt><dd><p>Base class for the dialogs defined in the other modules listed here.</p>
</dd>
<dt><a class="reference internal" href="https://docs.python.org/3/library/dialog.html#module-tkinter.filedialog" title="tkinter.filedialog: Dialog classes for file selection (Tk)"><code class="xref py py-mod docutils literal notranslate"><span class="pre"><span class="highlighted">tkinter</span>.filedialog</span></code></a></dt><dd><p>Common dialogs to allow the user to specify a file to open or save.</p>
</dd>
<dt><a class="reference internal" href="https://docs.python.org/3/library/tkinter.font.html#module-tkinter.font" title="tkinter.font: Tkinter font-wrapping class (Tk)"><code class="xref py py-mod docutils literal notranslate"><span class="pre"><span class="highlighted">tkinter</span>.font</span></code></a></dt><dd><p>Utilities to help work with fonts.</p>
</dd>
<dt><a class="reference internal" href="https://docs.python.org/3/library/tkinter.messagebox.html#module-tkinter.messagebox" title="tkinter.messagebox: Various types of alert dialogs (Tk)"><code class="xref py py-mod docutils literal notranslate"><span class="pre"><span class="highlighted">tkinter</span>.messagebox</span></code></a></dt><dd><p>Access to standard Tk dialog boxes.</p>
</dd>
<dt><a class="reference internal" href="https://docs.python.org/3/library/tkinter.scrolledtext.html#module-tkinter.scrolledtext" title="tkinter.scrolledtext: Text widget with a vertical scroll bar. (Tk)"><code class="xref py py-mod docutils literal notranslate"><span class="pre"><span class="highlighted">tkinter</span>.scrolledtext</span></code></a></dt><dd><p>Text widget with a vertical scroll bar built in.</p>
</dd>
<dt><a class="reference internal" href="https://docs.python.org/3/library/dialog.html#module-tkinter.simpledialog" title="tkinter.simpledialog: Simple dialog windows (Tk)"><code class="xref py py-mod docutils literal notranslate"><span class="pre"><span class="highlighted">tkinter</span>.simpledialog</span></code></a></dt><dd><p>Basic dialogs and convenience functions.</p>
</dd>
<dt><a class="reference internal" href="https://docs.python.org/3/library/tkinter.ttk.html#module-tkinter.ttk" title="tkinter.ttk: Tk themed widget set"><code class="xref py py-mod docutils literal notranslate"><span class="pre"><span class="highlighted">tkinter</span>.ttk</span></code></a></dt><dd><p>Themed widget set introduced in Tk 8.5, providing modern alternatives
for many of the classic widgets in the main <a class="reference internal" href="https://docs.python.org/3/library/tkinter.html?highlight=tkinter#module-tkinter" title="tkinter: Interface to Tcl/Tk for graphical user interfaces"><code class="xref py py-mod docutils literal notranslate"><span class="pre"><span class="highlighted">tkinter</span></span></code></a> module.</p>
</dd>
</dl>
<p>Additional modules:</p>
<dl class="simple">
<dt><code class="xref py py-mod docutils literal notranslate"><span class="pre">_<span class="highlighted">tkinter</span></span></code></dt><dd><p>A binary module that contains the low-level interface to Tcl/Tk.
It is automatically imported by the main <a class="reference internal" href="https://docs.python.org/3/library/tkinter.html?highlight=tkinter#module-tkinter" title="tkinter: Interface to Tcl/Tk for graphical user interfaces"><code class="xref py py-mod docutils literal notranslate"><span class="pre"><span class="highlighted">tkinter</span></span></code></a> module,
and should never be used directly by application programmers.
It is usually a shared library (or DLL), but might in some cases be
statically linked with the Python interpreter.</p>
</dd>
<dt><a class="reference internal" href="https://docs.python.org/3/library/idle.html#module-idlelib" title="idlelib: Implementation package for the IDLE shell/editor."><code class="xref py py-mod docutils literal notranslate"><span class="pre">idlelib</span></code></a></dt><dd><p>Python’s Integrated Development and Learning Environment (IDLE). Based
on <a class="reference internal" href="https://docs.python.org/3/library/tkinter.html?highlight=tkinter#module-tkinter" title="tkinter: Interface to Tcl/Tk for graphical user interfaces"><code class="xref py py-mod docutils literal notranslate"><span class="pre"><span class="highlighted">tkinter</span></span></code></a>.</p>
</dd>
<dt><code class="xref py py-mod docutils literal notranslate"><span class="pre"><span class="highlighted">tkinter</span>.constants</span></code></dt><dd><p>Symbolic constants that can be used in place of strings when passing
various parameters to <span class="highlighted">Tkinter</span> calls. Automatically imported by the
main <a class="reference internal" href="https://docs.python.org/3/library/tkinter.html?highlight=tkinter#module-tkinter" title="tkinter: Interface to Tcl/Tk for graphical user interfaces"><code class="xref py py-mod docutils literal notranslate"><span class="pre">tkinter</span></code></a> module.</p>
</dd>
<dt><a class="reference internal" href="https://docs.python.org/3/library/tkinter.dnd.html#module-tkinter.dnd" title="tkinter.dnd: Tkinter drag-and-drop interface (Tk)"><code class="xref py py-mod docutils literal notranslate"><span class="pre"><span class="highlighted">tkinter</span>.dnd</span></code></a></dt><dd><p>(experimental) Drag-and-drop support for <a class="reference internal" href="https://docs.python.org/3/library/tkinter.html?highlight=tkinter#module-tkinter" title="tkinter: Interface to Tcl/Tk for graphical user interfaces"><code class="xref py py-mod docutils literal notranslate"><span class="pre"><span class="highlighted">tkinter</span></span></code></a>. This will
become deprecated when it is replaced with the Tk DND.</p>
</dd>
<dt><a class="reference internal" href="https://docs.python.org/3/library/tkinter.tix.html#module-tkinter.tix" title="tkinter.tix: Tk Extension Widgets for Tkinter"><code class="xref py py-mod docutils literal notranslate"><span class="pre"><span class="highlighted">tkinter</span>.tix</span></code></a></dt><dd><p>(deprecated) An older third-party Tcl/Tk package that adds several new
widgets. Better alternatives for most can be found in <a class="reference internal" href="https://docs.python.org/3/library/tkinter.ttk.html#module-tkinter.ttk" title="tkinter.ttk: Tk themed widget set"><code class="xref py py-mod docutils literal notranslate"><span class="pre"><span class="highlighted">tkinter</span>.ttk</span></code></a>.</p>
</dd>
<dt><a class="reference internal" href="https://docs.python.org/3/library/turtle.html#module-turtle" title="turtle: An educational framework for simple graphics applications"><code class="xref py py-mod docutils literal notranslate"><span class="pre">turtle</span></code></a></dt><dd><p>Turtle graphics in a Tk window.</p>
</dd>
</dl>
</section>
<section id="tkinter-life-preserver">
<h2><span class="highlighted">Tkinter</span> Life Preserver<a class="headerlink" href="https://docs.python.org/3/library/tkinter.html?highlight=tkinter#tkinter-life-preserver" title="Permalink to this headline">¶</a></h2>
<p>This section is not designed to be an exhaustive tutorial on either Tk or
<span class="highlighted">Tkinter</span>.  For that, refer to one of the external resources noted earlier.
Instead, this section provides a very quick orientation to what a Tkinter
application looks like, identifies foundational Tk concepts, and
explains how the Tkinter wrapper is structured.</p>
<p>The remainder of this section will help you to identify the classes,
methods, and options you’ll need in your <span class="highlighted">Tkinter</span> application, and where to
find more detailed documentation on them, including in the official Tcl/Tk
reference manual.</p>
<section id="a-hello-world-program">
<h3>A Hello World Program<a class="headerlink" href="https://docs.python.org/3/library/tkinter.html?highlight=tkinter#a-hello-world-program" title="Permalink to this headline">¶</a></h3>
<p>We’ll start by walking through a “Hello World” application in <span class="highlighted">Tkinter</span>. This
isn’t the smallest one we could write, but has enough to illustrate some
key concepts you’ll need to know.</p>
<div class="highlight-python3 notranslate" style="position: relative;"><div class="highlight"><pre><span></span><span class="kn">from</span> <span class="nn"><span class="highlighted">tkinter</span></span> <span class="kn">import</span> <span class="o">*</span>
<span class="kn">from</span> <span class="nn"><span class="highlighted">tkinter</span></span> <span class="kn">import</span> <span class="n">ttk</span>
<span class="n">root</span> <span class="o">=</span> <span class="n">Tk</span><span class="p">()</span>
<span class="n">frm</span> <span class="o">=</span> <span class="n">ttk</span><span class="o">.</span><span class="n">Frame</span><span class="p">(</span><span class="n">root</span><span class="p">,</span> <span class="n">padding</span><span class="o">=</span><span class="mi">10</span><span class="p">)</span>
<span class="n">frm</span><span class="o">.</span><span class="n">grid</span><span class="p">()</span>
<span class="n">ttk</span><span class="o">.</span><span class="n">Label</span><span class="p">(</span><span class="n">frm</span><span class="p">,</span> <span class="n">text</span><span class="o">=</span><span class="s2">"Hello World!"</span><span class="p">)</span><span class="o">.</span><span class="n">grid</span><span class="p">(</span><span class="n">column</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="n">row</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span>
<span class="n">ttk</span><span class="o">.</span><span class="n">Button</span><span class="p">(</span><span class="n">frm</span><span class="p">,</span> <span class="n">text</span><span class="o">=</span><span class="s2">"Quit"</span><span class="p">,</span> <span class="n">command</span><span class="o">=</span><span class="n">root</span><span class="o">.</span><span class="n">destroy</span><span class="p">)</span><span class="o">.</span><span class="n">grid</span><span class="p">(</span><span class="n">column</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">row</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span>
<span class="n">root</span><span class="o">.</span><span class="n">mainloop</span><span class="p">()</span>
</pre></div>
</div>
<p>After the imports, the next line creates an instance of the <a class="reference internal" href="https://docs.python.org/3/library/tkinter.html?highlight=tkinter#tkinter.Tk" title="tkinter.Tk"><code class="xref py py-class docutils literal notranslate"><span class="pre">Tk</span></code></a> class,
which initializes Tk and creates its associated Tcl interpreter. It also
creates a toplevel window, known as the root window, which serves as the main
window of the application.</p>
<p>The following line creates a frame widget, which in this case will contain
a label and a button we’ll create next. The frame is fit inside the root
window.</p>
<p>The next line creates a label widget holding a static text string. The
<code class="xref py py-meth docutils literal notranslate"><span class="pre">grid()</span></code> method is used to specify the relative layout (position) of the
label within its containing frame widget, similar to how tables in HTML work.</p>
<p>A button widget is then created, and placed to the right of the label. When
pressed, it will call the <code class="xref py py-meth docutils literal notranslate"><span class="pre">destroy()</span></code> method of the root window.</p>
<p>Finally, the <code class="xref py py-meth docutils literal notranslate"><span class="pre">mainloop()</span></code> method puts everything on the display, and
responds to user input until the program terminates.</p>
</section>
<section id="important-tk-concepts">
<h3>Important Tk Concepts<a class="headerlink" href="https://docs.python.org/3/library/tkinter.html?highlight=tkinter#important-tk-concepts" title="Permalink to this headline">¶</a></h3>
<p>Even this simple program illustrates the following key Tk concepts:</p>
<dl class="simple">
<dt>widgets</dt><dd><p>A <span class="highlighted">Tkinter</span> user interface is made up of individual <em>widgets</em>. Each widget is
represented as a Python object, instantiated from classes like
<code class="xref py py-class docutils literal notranslate"><span class="pre">ttk.Frame</span></code>, <code class="xref py py-class docutils literal notranslate"><span class="pre">ttk.Label</span></code>, and <code class="xref py py-class docutils literal notranslate"><span class="pre">ttk.Button</span></code>.</p>
</dd>
<dt>widget hierarchy</dt><dd><p>Widgets are arranged in a <em>hierarchy</em>. The label and button were contained
within a frame, which in turn was contained within the root window. When
creating each <em>child</em> widget, its <em>parent</em> widget is passed as the first
argument to the widget constructor.</p>
</dd>
<dt>configuration options</dt><dd><p>Widgets have <em>configuration options</em>, which modify their appearance and
behavior, such as the text to display in a label or button. Different
classes of widgets will have different sets of options.</p>
</dd>
<dt>geometry management</dt><dd><p>Widgets aren’t automatically added to the user interface when they are
created. A <em>geometry manager</em> like <code class="docutils literal notranslate"><span class="pre">grid</span></code> controls where in the
user interface they are placed.</p>
</dd>
<dt>event loop</dt><dd><p><span class="highlighted">Tkinter</span> reacts to user input, changes from your program, and even refreshes
the display only when actively running an <em>event loop</em>. If your program
isn’t running the event loop, your user interface won’t update.</p>
</dd>
</dl>
</section>
<section id="understanding-how-tkinter-wraps-tcl-tk">
<h3>Understanding How <span class="highlighted">Tkinter</span> Wraps Tcl/Tk<a class="headerlink" href="https://docs.python.org/3/library/tkinter.html?highlight=tkinter#understanding-how-tkinter-wraps-tcl-tk" title="Permalink to this headline">¶</a></h3>
<p>When your application uses <span class="highlighted">Tkinter</span>’s classes and methods, internally <span class="highlighted">Tkinter</span>
is assembling strings representing Tcl/Tk commands, and executing those
commands in the Tcl interpreter attached to your applicaton’s <a class="reference internal" href="https://docs.python.org/3/library/tkinter.html?highlight=tkinter#tkinter.Tk" title="tkinter.Tk"><code class="xref py py-class docutils literal notranslate"><span class="pre">Tk</span></code></a>
instance.</p>
<p>Whether it’s trying to navigate reference documentation, trying to find
the right method or option, adapting some existing code, or debugging your
<span class="highlighted">Tkinter</span> application, there are times that it will be useful to understand
what those underlying Tcl/Tk commands look like.</p>
<p>To illustrate, here is the Tcl/Tk equivalent of the main part of the <span class="highlighted">Tkinter</span>
script above.</p>
<div class="highlight-python3 notranslate" style="position: relative;"><div class="highlight"><pre><span></span><span class="n">ttk</span><span class="p">::</span><span class="n">frame</span> <span class="o">.</span><span class="n">frm</span> <span class="o">-</span><span class="n">padding</span> <span class="mi">10</span>
<span class="n">grid</span> <span class="o">.</span><span class="n">frm</span>
<span class="n">grid</span> <span class="p">[</span><span class="n">ttk</span><span class="p">::</span><span class="n">label</span> <span class="o">.</span><span class="n">frm</span><span class="o">.</span><span class="n">lbl</span> <span class="o">-</span><span class="n">text</span> <span class="s2">"Hello World!"</span><span class="p">]</span> <span class="o">-</span><span class="n">column</span> <span class="mi">0</span> <span class="o">-</span><span class="n">row</span> <span class="mi">0</span>
<span class="n">grid</span> <span class="p">[</span><span class="n">ttk</span><span class="p">::</span><span class="n">button</span> <span class="o">.</span><span class="n">frm</span><span class="o">.</span><span class="n">btn</span> <span class="o">-</span><span class="n">text</span> <span class="s2">"Quit"</span> <span class="o">-</span><span class="n">command</span> <span class="s2">"destroy ."</span><span class="p">]</span> <span class="o">-</span><span class="n">column</span> <span class="mi">1</span> <span class="o">-</span><span class="n">row</span> <span class="mi">0</span>
</pre></div>
</div>
<p>Tcl’s syntax is similar to many shell languages, where the first word is the
command to be executed, with arguments to that command following it, separated
by spaces. Without getting into too many details, notice the following:</p>
<ul class="simple">
<li><p>The commands used to create widgets (like <code class="docutils literal notranslate"><span class="pre">ttk::frame</span></code>) correspond to
widget classes in <span class="highlighted">Tkinter</span>.</p></li>
<li><p>Tcl widget options (like <code class="docutils literal notranslate"><span class="pre">-text</span></code>) correspond to keyword arguments in
<span class="highlighted">Tkinter</span>.</p></li>
<li><p>Widgets are referred to by a <em>pathname</em> in Tcl (like <code class="docutils literal notranslate"><span class="pre">.frm.btn</span></code>),
whereas <span class="highlighted">Tkinter</span> doesn’t use names but object references.</p></li>
<li><p>A widget’s place in the widget hierarchy is encoded in its (hierarchical)
pathname, which uses a <code class="docutils literal notranslate"><span class="pre">.</span></code> (dot) as a path separator. The pathname for
the root window is just <code class="docutils literal notranslate"><span class="pre">.</span></code> (dot). In <span class="highlighted">Tkinter</span>, the hierarchy is defined
not by pathname but by specifying the parent widget when creating each
child widget.</p></li>
<li><p>Operations which are implemented as separate <em>commands</em> in Tcl (like
<code class="docutils literal notranslate"><span class="pre">grid</span></code> or <code class="docutils literal notranslate"><span class="pre">destroy</span></code>) are represented as <em>methods</em> on <span class="highlighted">Tkinter</span> widget
objects. As you’ll see shortly, at other times Tcl uses what appear to be
method calls on widget objects, which more closely mirror what would is
used in Tkinter.</p></li>
</ul>
</section>
<section id="how-do-i-what-option-does">
<h3>How do I…? What option does…?<a class="headerlink" href="https://docs.python.org/3/library/tkinter.html?highlight=tkinter#how-do-i-what-option-does" title="Permalink to this headline">¶</a></h3>
<p>If you’re not sure how to do something in <span class="highlighted">Tkinter</span>, and you can’t immediately
find it in the tutorial or reference documentation you’re using, there are a
few strategies that can be helpful.</p>
<p>First, remember that the details of how individual widgets work may vary
across different versions of both <span class="highlighted">Tkinter</span> and Tcl/Tk. If you’re searching
documentation, make sure it corresponds to the Python and Tcl/Tk versions
installed on your system.</p>
<p>When searching for how to use an API, it helps to know the exact name of the
class, option, or method that you’re using. Introspection, either in an
interactive Python shell or with <a class="reference internal" href="https://docs.python.org/3/library/functions.html#print" title="print"><code class="xref py py-func docutils literal notranslate"><span class="pre">print()</span></code></a>, can help you identify what
you need.</p>
<p>To find out what configuration options are available on any widget, call its
<code class="xref py py-meth docutils literal notranslate"><span class="pre">configure()</span></code> method, which returns a dictionary containing a variety of
information about each object, including its default and current values. Use
<code class="xref py py-meth docutils literal notranslate"><span class="pre">keys()</span></code> to get just the names of each option.</p>
<div class="highlight-python3 notranslate" style="position: relative;"><div class="highlight"><pre><span></span><span class="n">btn</span> <span class="o">=</span> <span class="n">ttk</span><span class="o">.</span><span class="n">Button</span><span class="p">(</span><span class="n">frm</span><span class="p">,</span> <span class="o">...</span><span class="p">)</span>
<span class="nb">print</span><span class="p">(</span><span class="n">btn</span><span class="o">.</span><span class="n">configure</span><span class="p">()</span><span class="o">.</span><span class="n">keys</span><span class="p">())</span>
</pre></div>
</div>
<p>As most widgets have many configuration options in common, it can be useful
to find out which are specific to a particular widget class. Comparing the
list of options to that of a simpler widget, like a frame, is one way to
do that.</p>
<div class="highlight-python3 notranslate" style="position: relative;"><div class="highlight"><pre><span></span><span class="nb">print</span><span class="p">(</span><span class="nb">set</span><span class="p">(</span><span class="n">btn</span><span class="o">.</span><span class="n">configure</span><span class="p">()</span><span class="o">.</span><span class="n">keys</span><span class="p">())</span> <span class="o">-</span> <span class="nb">set</span><span class="p">(</span><span class="n">frm</span><span class="o">.</span><span class="n">configure</span><span class="p">()</span><span class="o">.</span><span class="n">keys</span><span class="p">()))</span>
</pre></div>
</div>
<p>Similarly, you can find the available methods for a widget object using the
standard <a class="reference internal" href="https://docs.python.org/3/library/functions.html#dir" title="dir"><code class="xref py py-func docutils literal notranslate"><span class="pre">dir()</span></code></a> function. If you try it, you’ll see there are over 200
common widget methods, so again identifying those specific to a widget class
is helpful.</p>
<div class="highlight-python3 notranslate" style="position: relative;"><div class="highlight"><pre><span></span><span class="nb">print</span><span class="p">(</span><span class="nb">dir</span><span class="p">(</span><span class="n">btn</span><span class="p">))</span>
<span class="nb">print</span><span class="p">(</span><span class="nb">set</span><span class="p">(</span><span class="nb">dir</span><span class="p">(</span><span class="n">btn</span><span class="p">))</span> <span class="o">-</span> <span class="nb">set</span><span class="p">(</span><span class="nb">dir</span><span class="p">(</span><span class="n">frm</span><span class="p">)))</span>
</pre></div>
</div>
</section>
<section id="navigating-the-tcl-tk-reference-manual">
<h3>Navigating the Tcl/Tk Reference Manual<a class="headerlink" href="https://docs.python.org/3/library/tkinter.html?highlight=tkinter#navigating-the-tcl-tk-reference-manual" title="Permalink to this headline">¶</a></h3>
<p>As noted, the official <a class="reference external" href="https://www.tcl.tk/man/tcl8.6/TkCmd/contents.htm">Tk commands</a>
reference manual (man pages) is often the most accurate description of what
specific operations on widgets do. Even when you know the name of the option
or method that you need, you may still have a few places to look.</p>
<p>While all operations in <span class="highlighted">Tkinter</span> are implemented as method calls on widget
objects, you’ve seen that many Tcl/Tk operations appear as commands that
take a widget pathname as its first parameter, followed by optional
parameters, e.g.</p>
<div class="highlight-python3 notranslate" style="position: relative;"><div class="highlight"><pre><span></span><span class="n">destroy</span> <span class="o">.</span>
<span class="n">grid</span> <span class="o">.</span><span class="n">frm</span><span class="o">.</span><span class="n">btn</span> <span class="o">-</span><span class="n">column</span> <span class="mi">0</span> <span class="o">-</span><span class="n">row</span> <span class="mi">0</span>
</pre></div>
</div>
<p>Others, however, look more like methods called on a widget object (in fact,
when you create a widget in Tcl/Tk, it creates a Tcl command with the name
of the widget pathname, with the first parameter to that command being the
name of a method to call).</p>
<div class="highlight-python3 notranslate" style="position: relative;"><div class="highlight"><pre><span></span><span class="o">.</span><span class="n">frm</span><span class="o">.</span><span class="n">btn</span> <span class="n">invoke</span>
<span class="o">.</span><span class="n">frm</span><span class="o">.</span><span class="n">lbl</span> <span class="n">configure</span> <span class="o">-</span><span class="n">text</span> <span class="s2">"Goodbye"</span>
</pre></div>
</div>
<p>In the official Tcl/Tk reference documentation, you’ll find most operations
that look like method calls on the man page for a specific widget (e.g.,
you’ll find the <code class="xref py py-meth docutils literal notranslate"><span class="pre">invoke()</span></code> method on the
<a class="reference external" href="https://www.tcl.tk/man/tcl8.6/TkCmd/ttk_button.htm">ttk::button</a>
man page), while functions that take a widget as a parameter often have
their own man page (e.g.,
<a class="reference external" href="https://www.tcl.tk/man/tcl8.6/TkCmd/grid.htm">grid</a>).</p>
<p>You’ll find many common options and methods in the
<a class="reference external" href="https://www.tcl.tk/man/tcl8.6/TkCmd/options.htm">options</a> or
<a class="reference external" href="https://www.tcl.tk/man/tcl8.6/TkCmd/ttk_widget.htm">ttk::widget</a> man
pages, while others are found in the man page for a specific widget class.</p>
<p>You’ll also find that many <span class="highlighted">Tkinter</span> methods have compound names, e.g.,
<code class="xref py py-func docutils literal notranslate"><span class="pre">winfo_x()</span></code>, <code class="xref py py-func docutils literal notranslate"><span class="pre">winfo_height()</span></code>, <code class="xref py py-func docutils literal notranslate"><span class="pre">winfo_viewable()</span></code>. You’d find
documentation for all of these in the
<a class="reference external" href="https://www.tcl.tk/man/tcl8.6/TkCmd/winfo.htm">winfo</a> man page.</p>
<div class="admonition note">
<p class="admonition-title">Note</p>
<p>Somewhat confusingly, there are also methods on all <span class="highlighted">Tkinter</span> widgets
that don’t actually operate on the widget, but operate at a global
scope, independent of any widget. Examples are methods for accessing
the clipboard or the system bell. (They happen to be implemented as
methods in the base <code class="xref py py-class docutils literal notranslate"><span class="pre">Widget</span></code> class that all Tkinter widgets
inherit from).</p>
</div>
</section>
</section>
<section id="threading-model">
<h2>Threading model<a class="headerlink" href="https://docs.python.org/3/library/tkinter.html?highlight=tkinter#threading-model" title="Permalink to this headline">¶</a></h2>
<p>Python and Tcl/Tk have very different threading models, which <a class="reference internal" href="https://docs.python.org/3/library/tkinter.html?highlight=tkinter#module-tkinter" title="tkinter: Interface to Tcl/Tk for graphical user interfaces"><code class="xref py py-mod docutils literal notranslate"><span class="pre"><span class="highlighted">tkinter</span></span></code></a>
tries to bridge. If you use threads, you may need to be aware of this.</p>
<p>A Python interpreter may have many threads associated with it. In Tcl, multiple
threads can be created, but each thread has a separate Tcl interpreter instance
associated with it. Threads can also create more than one interpreter instance,
though each interpreter instance can be used only by the one thread that created it.</p>
<p>Each <a class="reference internal" href="https://docs.python.org/3/library/tkinter.html?highlight=tkinter#tkinter.Tk" title="tkinter.Tk"><code class="xref py py-class docutils literal notranslate"><span class="pre">Tk</span></code></a> object created by <a class="reference internal" href="https://docs.python.org/3/library/tkinter.html?highlight=tkinter#module-tkinter" title="tkinter: Interface to Tcl/Tk for graphical user interfaces"><code class="xref py py-mod docutils literal notranslate"><span class="pre"><span class="highlighted">tkinter</span></span></code></a> contains a Tcl interpreter.
It also keeps track of which thread created that interpreter. Calls to
<a class="reference internal" href="https://docs.python.org/3/library/tkinter.html?highlight=tkinter#module-tkinter" title="tkinter: Interface to Tcl/Tk for graphical user interfaces"><code class="xref py py-mod docutils literal notranslate"><span class="pre"><span class="highlighted">tkinter</span></span></code></a> can be made from any Python thread. Internally, if a call comes
from a thread other than the one that created the <a class="reference internal" href="https://docs.python.org/3/library/tkinter.html?highlight=tkinter#tkinter.Tk" title="tkinter.Tk"><code class="xref py py-class docutils literal notranslate"><span class="pre">Tk</span></code></a> object, an event
is posted to the interpreter’s event queue, and when executed, the result is
returned to the calling Python thread.</p>
<p>Tcl/Tk applications are normally event-driven, meaning that after initialization,
the interpreter runs an event loop (i.e. <code class="xref py py-func docutils literal notranslate"><span class="pre">Tk.mainloop()</span></code>) and responds to events.
Because it is single-threaded, event handlers must respond quickly, otherwise they
will block other events from being processed. To avoid this, any long-running
computations should not run in an event handler, but are either broken into smaller
pieces using timers, or run in another thread. This is different from many GUI
toolkits where the GUI runs in a completely separate thread from all application
code including event handlers.</p>
<p>If the Tcl interpreter is not running the event loop and processing events, any
<a class="reference internal" href="https://docs.python.org/3/library/tkinter.html?highlight=tkinter#module-tkinter" title="tkinter: Interface to Tcl/Tk for graphical user interfaces"><code class="xref py py-mod docutils literal notranslate"><span class="pre"><span class="highlighted">tkinter</span></span></code></a> calls made from threads other than the one running the Tcl
interpreter will fail.</p>
<p>A number of special cases exist:</p>
<blockquote>
<div><ul class="simple">
<li><p>Tcl/Tk libraries can be built so they are not thread-aware. In this case,
<a class="reference internal" href="https://docs.python.org/3/library/tkinter.html?highlight=tkinter#module-tkinter" title="tkinter: Interface to Tcl/Tk for graphical user interfaces"><code class="xref py py-mod docutils literal notranslate"><span class="pre"><span class="highlighted">tkinter</span></span></code></a> calls the library from the originating Python thread, even
if this is different than the thread that created the Tcl interpreter. A global
lock ensures only one call occurs at a time.</p></li>
<li><p>While <a class="reference internal" href="https://docs.python.org/3/library/tkinter.html?highlight=tkinter#module-tkinter" title="tkinter: Interface to Tcl/Tk for graphical user interfaces"><code class="xref py py-mod docutils literal notranslate"><span class="pre"><span class="highlighted">tkinter</span></span></code></a> allows you to create more than one instance of a <a class="reference internal" href="https://docs.python.org/3/library/tkinter.html?highlight=tkinter#tkinter.Tk" title="tkinter.Tk"><code class="xref py py-class docutils literal notranslate"><span class="pre">Tk</span></code></a>
object (with its own interpreter), all interpreters that are part of the same
thread share a common event queue, which gets ugly fast. In practice, don’t create
more than one instance of <a class="reference internal" href="https://docs.python.org/3/library/tkinter.html?highlight=tkinter#tkinter.Tk" title="tkinter.Tk"><code class="xref py py-class docutils literal notranslate"><span class="pre">Tk</span></code></a> at a time. Otherwise, it’s best to create
them in separate threads and ensure you’re running a thread-aware Tcl/Tk build.</p></li>
<li><p>Blocking event handlers are not the only way to prevent the Tcl interpreter from
reentering the event loop. It is even possible to run multiple nested event loops
or abandon the event loop entirely. If you’re doing anything tricky when it comes
to events or threads, be aware of these possibilities.</p></li>
<li><p>There are a few select <a class="reference internal" href="https://docs.python.org/3/library/tkinter.html?highlight=tkinter#module-tkinter" title="tkinter: Interface to Tcl/Tk for graphical user interfaces"><code class="xref py py-mod docutils literal notranslate"><span class="pre"><span class="highlighted">tkinter</span></span></code></a> functions that presently work only when
called from the thread that created the Tcl interpreter.</p></li>
</ul>
</div></blockquote>
</section>
<section id="handy-reference">
<h2>Handy Reference<a class="headerlink" href="https://docs.python.org/3/library/tkinter.html?highlight=tkinter#handy-reference" title="Permalink to this headline">¶</a></h2>
<section id="setting-options">
<span id="tkinter-setting-options"></span><h3>Setting Options<a class="headerlink" href="https://docs.python.org/3/library/tkinter.html?highlight=tkinter#setting-options" title="Permalink to this headline">¶</a></h3>
<p>Options control things like the color and border width of a widget. Options can
be set in three ways:</p>
<dl>
<dt>At object creation time, using keyword arguments</dt><dd><div class="highlight-python3 notranslate" style="position: relative;"><div class="highlight"><pre><span></span><span class="n">fred</span> <span class="o">=</span> <span class="n">Button</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">fg</span><span class="o">=</span><span class="s2">"red"</span><span class="p">,</span> <span class="n">bg</span><span class="o">=</span><span class="s2">"blue"</span><span class="p">)</span>
</pre></div>
</div>
</dd>
<dt>After object creation, treating the option name like a dictionary index</dt><dd><div class="highlight-python3 notranslate" style="position: relative;"><div class="highlight"><pre><span></span><span class="n">fred</span><span class="p">[</span><span class="s2">"fg"</span><span class="p">]</span> <span class="o">=</span> <span class="s2">"red"</span>
<span class="n">fred</span><span class="p">[</span><span class="s2">"bg"</span><span class="p">]</span> <span class="o">=</span> <span class="s2">"blue"</span>
</pre></div>
</div>
</dd>
<dt>Use the config() method to update multiple attrs subsequent to object creation</dt><dd><div class="highlight-python3 notranslate" style="position: relative;"><div class="highlight"><pre><span></span><span class="n">fred</span><span class="o">.</span><span class="n">config</span><span class="p">(</span><span class="n">fg</span><span class="o">=</span><span class="s2">"red"</span><span class="p">,</span> <span class="n">bg</span><span class="o">=</span><span class="s2">"blue"</span><span class="p">)</span>
</pre></div>
</div>
</dd>
</dl>
<p>For a complete explanation of a given option and its behavior, see the Tk man
pages for the widget in question.</p>
<p>Note that the man pages list “STANDARD OPTIONS” and “WIDGET SPECIFIC OPTIONS”
for each widget.  The former is a list of options that are common to many
widgets, the latter are the options that are idiosyncratic to that particular
widget.  The Standard Options are documented on the <em class="manpage"><a class="manpage reference external" href="https://manpages.debian.org/options(3)">options(3)</a></em> man
page.</p>
<p>No distinction between standard and widget-specific options is made in this
document.  Some options don’t apply to some kinds of widgets. Whether a given
widget responds to a particular option depends on the class of the widget;
buttons have a <code class="docutils literal notranslate"><span class="pre">command</span></code> option, labels do not.</p>
<p>The options supported by a given widget are listed in that widget’s man page, or
can be queried at runtime by calling the <code class="xref py py-meth docutils literal notranslate"><span class="pre">config()</span></code> method without
arguments, or by calling the <code class="xref py py-meth docutils literal notranslate"><span class="pre">keys()</span></code> method on that widget.  The return
value of these calls is a dictionary whose key is the name of the option as a
string (for example, <code class="docutils literal notranslate"><span class="pre">'relief'</span></code>) and whose values are 5-tuples.</p>
<p>Some options, like <code class="docutils literal notranslate"><span class="pre">bg</span></code> are synonyms for common options with long names
(<code class="docutils literal notranslate"><span class="pre">bg</span></code> is shorthand for “background”). Passing the <code class="docutils literal notranslate"><span class="pre">config()</span></code> method the name
of a shorthand option will return a 2-tuple, not 5-tuple. The 2-tuple passed
back will contain the name of the synonym and the “real” option (such as
<code class="docutils literal notranslate"><span class="pre">('bg',</span> <span class="pre">'background')</span></code>).</p>
<div class="responsive-table__container"><table class="docutils align-default">
<colgroup>
<col style="width: 13%">
<col style="width: 61%">
<col style="width: 26%">
</colgroup>
<thead>
<tr class="row-odd"><th class="head"><p>Index</p></th>
<th class="head"><p>Meaning</p></th>
<th class="head"><p>Example</p></th>
</tr>
</thead>
<tbody>
<tr class="row-even"><td><p>0</p></td>
<td><p>option name</p></td>
<td><p><code class="docutils literal notranslate"><span class="pre">'relief'</span></code></p></td>
</tr>
<tr class="row-odd"><td><p>1</p></td>
<td><p>option name for database lookup</p></td>
<td><p><code class="docutils literal notranslate"><span class="pre">'relief'</span></code></p></td>
</tr>
<tr class="row-even"><td><p>2</p></td>
<td><p>option class for database
lookup</p></td>
<td><p><code class="docutils literal notranslate"><span class="pre">'Relief'</span></code></p></td>
</tr>
<tr class="row-odd"><td><p>3</p></td>
<td><p>default value</p></td>
<td><p><code class="docutils literal notranslate"><span class="pre">'raised'</span></code></p></td>
</tr>
<tr class="row-even"><td><p>4</p></td>
<td><p>current value</p></td>
<td><p><code class="docutils literal notranslate"><span class="pre">'groove'</span></code></p></td>
</tr>
</tbody>
</table></div>
<p>Example:</p>
<div class="highlight-python3 notranslate" style="position: relative;"><div class="highlight"><span class="copybutton" title="Hide the prompts and output" style="cursor: pointer; position: absolute; top: 0px; right: 0px; border-color: rgb(170, 204, 153); border-style: solid; border-width: 1px; color: rgb(170, 204, 153); font-family: monospace; padding-left: 0.2em; padding-right: 0.2em; border-radius: 0px 3px 0px 0px;">&gt;&gt;&gt;</span><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="nb">print</span><span class="p">(</span><span class="n">fred</span><span class="o">.</span><span class="n">config</span><span class="p">())</span>
<span class="go">{'relief': ('relief', 'relief', 'Relief', 'raised', 'groove')}</span>
</pre></div>
</div>
<p>Of course, the dictionary printed will include all the options available and
their values.  This is meant only as an example.</p>
</section>
<section id="the-packer">
<h3>The Packer<a class="headerlink" href="https://docs.python.org/3/library/tkinter.html?highlight=tkinter#the-packer" title="Permalink to this headline">¶</a></h3>
<p id="index-2">The packer is one of Tk’s geometry-management mechanisms.    Geometry managers
are used to specify the relative positioning of widgets within their container -
their mutual <em>master</em>.  In contrast to the more cumbersome <em>placer</em> (which is
used less commonly, and we do not cover here), the packer takes qualitative
relationship specification - <em>above</em>, <em>to the left of</em>, <em>filling</em>, etc - and
works everything out to determine the exact placement coordinates for you.</p>
<p>The size of any <em>master</em> widget is determined by the size of the “slave widgets”
inside.  The packer is used to control where slave widgets appear inside the
master into which they are packed.  You can pack widgets into frames, and frames
into other frames, in order to achieve the kind of layout you desire.
Additionally, the arrangement is dynamically adjusted to accommodate incremental
changes to the configuration, once it is packed.</p>
<p>Note that widgets do not appear until they have had their geometry specified
with a geometry manager.  It’s a common early mistake to leave out the geometry
specification, and then be surprised when the widget is created but nothing
appears.  A widget will appear only after it has had, for example, the packer’s
<code class="xref py py-meth docutils literal notranslate"><span class="pre">pack()</span></code> method applied to it.</p>
<p>The pack() method can be called with keyword-option/value pairs that control
where the widget is to appear within its container, and how it is to behave when
the main application window is resized.  Here are some examples:</p>
<div class="highlight-python3 notranslate" style="position: relative;"><div class="highlight"><pre><span></span><span class="n">fred</span><span class="o">.</span><span class="n">pack</span><span class="p">()</span>                     <span class="c1"># defaults to side = "top"</span>
<span class="n">fred</span><span class="o">.</span><span class="n">pack</span><span class="p">(</span><span class="n">side</span><span class="o">=</span><span class="s2">"left"</span><span class="p">)</span>
<span class="n">fred</span><span class="o">.</span><span class="n">pack</span><span class="p">(</span><span class="n">expand</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
</pre></div>
</div>
</section>
<section id="packer-options">
<h3>Packer Options<a class="headerlink" href="https://docs.python.org/3/library/tkinter.html?highlight=tkinter#packer-options" title="Permalink to this headline">¶</a></h3>
<p>For more extensive information on the packer and the options that it can take,
see the man pages and page 183 of John Ousterhout’s book.</p>
<dl class="simple">
<dt>anchor</dt><dd><p>Anchor type.  Denotes where the packer is to place each slave in its parcel.</p>
</dd>
<dt>expand</dt><dd><p>Boolean, <code class="docutils literal notranslate"><span class="pre">0</span></code> or <code class="docutils literal notranslate"><span class="pre">1</span></code>.</p>
</dd>
<dt>fill</dt><dd><p>Legal values: <code class="docutils literal notranslate"><span class="pre">'x'</span></code>, <code class="docutils literal notranslate"><span class="pre">'y'</span></code>, <code class="docutils literal notranslate"><span class="pre">'both'</span></code>, <code class="docutils literal notranslate"><span class="pre">'none'</span></code>.</p>
</dd>
<dt>ipadx and ipady</dt><dd><p>A distance - designating internal padding on each side of the slave widget.</p>
</dd>
<dt>padx and pady</dt><dd><p>A distance - designating external padding on each side of the slave widget.</p>
</dd>
<dt>side</dt><dd><p>Legal values are: <code class="docutils literal notranslate"><span class="pre">'left'</span></code>, <code class="docutils literal notranslate"><span class="pre">'right'</span></code>, <code class="docutils literal notranslate"><span class="pre">'top'</span></code>, <code class="docutils literal notranslate"><span class="pre">'bottom'</span></code>.</p>
</dd>
</dl>
</section>
<section id="coupling-widget-variables">
<h3>Coupling Widget Variables<a class="headerlink" href="https://docs.python.org/3/library/tkinter.html?highlight=tkinter#coupling-widget-variables" title="Permalink to this headline">¶</a></h3>
<p>The current-value setting of some widgets (like text entry widgets) can be
connected directly to application variables by using special options.  These
options are <code class="docutils literal notranslate"><span class="pre">variable</span></code>, <code class="docutils literal notranslate"><span class="pre">textvariable</span></code>, <code class="docutils literal notranslate"><span class="pre">onvalue</span></code>, <code class="docutils literal notranslate"><span class="pre">offvalue</span></code>, and
<code class="docutils literal notranslate"><span class="pre">value</span></code>.  This connection works both ways: if the variable changes for any
reason, the widget it’s connected to will be updated to reflect the new value.</p>
<p>Unfortunately, in the current implementation of <a class="reference internal" href="https://docs.python.org/3/library/tkinter.html?highlight=tkinter#module-tkinter" title="tkinter: Interface to Tcl/Tk for graphical user interfaces"><code class="xref py py-mod docutils literal notranslate"><span class="pre"><span class="highlighted">tkinter</span></span></code></a> it is not
possible to hand over an arbitrary Python variable to a widget through a
<code class="docutils literal notranslate"><span class="pre">variable</span></code> or <code class="docutils literal notranslate"><span class="pre">textvariable</span></code> option.  The only kinds of variables for which
this works are variables that are subclassed from a class called Variable,
defined in <a class="reference internal" href="https://docs.python.org/3/library/tkinter.html?highlight=tkinter#module-tkinter" title="tkinter: Interface to Tcl/Tk for graphical user interfaces"><code class="xref py py-mod docutils literal notranslate"><span class="pre"><span class="highlighted">tkinter</span></span></code></a>.</p>
<p>There are many useful subclasses of Variable already defined:
<code class="xref py py-class docutils literal notranslate"><span class="pre">StringVar</span></code>, <code class="xref py py-class docutils literal notranslate"><span class="pre">IntVar</span></code>, <code class="xref py py-class docutils literal notranslate"><span class="pre">DoubleVar</span></code>, and
<code class="xref py py-class docutils literal notranslate"><span class="pre">BooleanVar</span></code>.  To read the current value of such a variable, call the
<code class="xref py py-meth docutils literal notranslate"><span class="pre">get()</span></code> method on it, and to change its value you call the <code class="xref py py-meth docutils literal notranslate"><span class="pre">set()</span></code>
method.  If you follow this protocol, the widget will always track the value of
the variable, with no further intervention on your part.</p>
<p>For example:</p>
<div class="highlight-python3 notranslate" style="position: relative;"><div class="highlight"><pre><span></span><span class="kn">import</span> <span class="nn"><span class="highlighted">tkinter</span></span> <span class="k">as</span> <span class="nn">tk</span>

<span class="k">class</span> <span class="nc">App</span><span class="p">(</span><span class="n">tk</span><span class="o">.</span><span class="n">Frame</span><span class="p">):</span>
    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">master</span><span class="p">):</span>
        <span class="nb">super</span><span class="p">()</span><span class="o">.</span><span class="fm">__init__</span><span class="p">(</span><span class="n">master</span><span class="p">)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">pack</span><span class="p">()</span>

        <span class="bp">self</span><span class="o">.</span><span class="n">entrythingy</span> <span class="o">=</span> <span class="n">tk</span><span class="o">.</span><span class="n">Entry</span><span class="p">()</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">entrythingy</span><span class="o">.</span><span class="n">pack</span><span class="p">()</span>

        <span class="c1"># Create the application variable.</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">contents</span> <span class="o">=</span> <span class="n">tk</span><span class="o">.</span><span class="n">StringVar</span><span class="p">()</span>
        <span class="c1"># Set it to some value.</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">contents</span><span class="o">.</span><span class="n">set</span><span class="p">(</span><span class="s2">"this is a variable"</span><span class="p">)</span>
        <span class="c1"># Tell the entry widget to watch this variable.</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">entrythingy</span><span class="p">[</span><span class="s2">"textvariable"</span><span class="p">]</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">contents</span>

        <span class="c1"># Define a callback for when the user hits return.</span>
        <span class="c1"># It prints the current value of the variable.</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">entrythingy</span><span class="o">.</span><span class="n">bind</span><span class="p">(</span><span class="s1">'&lt;Key-Return&gt;'</span><span class="p">,</span>
                             <span class="bp">self</span><span class="o">.</span><span class="n">print_contents</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">print_contents</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">event</span><span class="p">):</span>
        <span class="nb">print</span><span class="p">(</span><span class="s2">"Hi. The current entry content is:"</span><span class="p">,</span>
              <span class="bp">self</span><span class="o">.</span><span class="n">contents</span><span class="o">.</span><span class="n">get</span><span class="p">())</span>

<span class="n">root</span> <span class="o">=</span> <span class="n">tk</span><span class="o">.</span><span class="n">Tk</span><span class="p">()</span>
<span class="n">myapp</span> <span class="o">=</span> <span class="n">App</span><span class="p">(</span><span class="n">root</span><span class="p">)</span>
<span class="n">myapp</span><span class="o">.</span><span class="n">mainloop</span><span class="p">()</span>
</pre></div>
</div>
</section>
<section id="the-window-manager">
<h3>The Window Manager<a class="headerlink" href="https://docs.python.org/3/library/tkinter.html?highlight=tkinter#the-window-manager" title="Permalink to this headline">¶</a></h3>
<p id="index-3">In Tk, there is a utility command, <code class="docutils literal notranslate"><span class="pre">wm</span></code>, for interacting with the window
manager.  Options to the <code class="docutils literal notranslate"><span class="pre">wm</span></code> command allow you to control things like titles,
placement, icon bitmaps, and the like.  In <a class="reference internal" href="https://docs.python.org/3/library/tkinter.html?highlight=tkinter#module-tkinter" title="tkinter: Interface to Tcl/Tk for graphical user interfaces"><code class="xref py py-mod docutils literal notranslate"><span class="pre"><span class="highlighted">tkinter</span></span></code></a>, these commands have
been implemented as methods on the <code class="xref py py-class docutils literal notranslate"><span class="pre">Wm</span></code> class.  Toplevel widgets are
subclassed from the <code class="xref py py-class docutils literal notranslate"><span class="pre">Wm</span></code> class, and so can call the <code class="xref py py-class docutils literal notranslate"><span class="pre">Wm</span></code> methods
directly.</p>
<p>To get at the toplevel window that contains a given widget, you can often just
refer to the widget’s master.  Of course if the widget has been packed inside of
a frame, the master won’t represent a toplevel window.  To get at the toplevel
window that contains an arbitrary widget, you can call the <code class="xref py py-meth docutils literal notranslate"><span class="pre">_root()</span></code> method.
This method begins with an underscore to denote the fact that this function is
part of the implementation, and not an interface to Tk functionality.</p>
<p>Here are some examples of typical usage:</p>
<div class="highlight-python3 notranslate" style="position: relative;"><div class="highlight"><pre><span></span><span class="kn">import</span> <span class="nn"><span class="highlighted">tkinter</span></span> <span class="k">as</span> <span class="nn">tk</span>

<span class="k">class</span> <span class="nc">App</span><span class="p">(</span><span class="n">tk</span><span class="o">.</span><span class="n">Frame</span><span class="p">):</span>
    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">master</span><span class="o">=</span><span class="kc">None</span><span class="p">):</span>
        <span class="nb">super</span><span class="p">()</span><span class="o">.</span><span class="fm">__init__</span><span class="p">(</span><span class="n">master</span><span class="p">)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">pack</span><span class="p">()</span>

<span class="c1"># create the application</span>
<span class="n">myapp</span> <span class="o">=</span> <span class="n">App</span><span class="p">()</span>

<span class="c1">#</span>
<span class="c1"># here are method calls to the window manager class</span>
<span class="c1">#</span>
<span class="n">myapp</span><span class="o">.</span><span class="n">master</span><span class="o">.</span><span class="n">title</span><span class="p">(</span><span class="s2">"My Do-Nothing Application"</span><span class="p">)</span>
<span class="n">myapp</span><span class="o">.</span><span class="n">master</span><span class="o">.</span><span class="n">maxsize</span><span class="p">(</span><span class="mi">1000</span><span class="p">,</span> <span class="mi">400</span><span class="p">)</span>

<span class="c1"># start the program</span>
<span class="n">myapp</span><span class="o">.</span><span class="n">mainloop</span><span class="p">()</span>
</pre></div>
</div>
</section>
<section id="tk-option-data-types">
<h3>Tk Option Data Types<a class="headerlink" href="https://docs.python.org/3/library/tkinter.html?highlight=tkinter#tk-option-data-types" title="Permalink to this headline">¶</a></h3>
<dl id="index-4">
<dt>anchor</dt><dd><p>Legal values are points of the compass: <code class="docutils literal notranslate"><span class="pre">"n"</span></code>, <code class="docutils literal notranslate"><span class="pre">"ne"</span></code>, <code class="docutils literal notranslate"><span class="pre">"e"</span></code>, <code class="docutils literal notranslate"><span class="pre">"se"</span></code>,
<code class="docutils literal notranslate"><span class="pre">"s"</span></code>, <code class="docutils literal notranslate"><span class="pre">"sw"</span></code>, <code class="docutils literal notranslate"><span class="pre">"w"</span></code>, <code class="docutils literal notranslate"><span class="pre">"nw"</span></code>, and also <code class="docutils literal notranslate"><span class="pre">"center"</span></code>.</p>
</dd>
<dt>bitmap</dt><dd><p>There are eight built-in, named bitmaps: <code class="docutils literal notranslate"><span class="pre">'error'</span></code>, <code class="docutils literal notranslate"><span class="pre">'gray25'</span></code>,
<code class="docutils literal notranslate"><span class="pre">'gray50'</span></code>, <code class="docutils literal notranslate"><span class="pre">'hourglass'</span></code>, <code class="docutils literal notranslate"><span class="pre">'info'</span></code>, <code class="docutils literal notranslate"><span class="pre">'questhead'</span></code>, <code class="docutils literal notranslate"><span class="pre">'question'</span></code>,
<code class="docutils literal notranslate"><span class="pre">'warning'</span></code>.  To specify an X bitmap filename, give the full path to the file,
preceded with an <code class="docutils literal notranslate"><span class="pre">@</span></code>, as in <code class="docutils literal notranslate"><span class="pre">"@/usr/contrib/bitmap/gumby.bit"</span></code>.</p>
</dd>
<dt>boolean</dt><dd><p>You can pass integers 0 or 1 or the strings <code class="docutils literal notranslate"><span class="pre">"yes"</span></code> or <code class="docutils literal notranslate"><span class="pre">"no"</span></code>.</p>
</dd>
<dt>callback</dt><dd><p>This is any Python function that takes no arguments.  For example:</p>
<div class="highlight-python3 notranslate" style="position: relative;"><div class="highlight"><pre><span></span><span class="k">def</span> <span class="nf">print_it</span><span class="p">():</span>
    <span class="nb">print</span><span class="p">(</span><span class="s2">"hi there"</span><span class="p">)</span>
<span class="n">fred</span><span class="p">[</span><span class="s2">"command"</span><span class="p">]</span> <span class="o">=</span> <span class="n">print_it</span>
</pre></div>
</div>
</dd>
<dt>color</dt><dd><p>Colors can be given as the names of X colors in the rgb.txt file, or as strings
representing RGB values in 4 bit: <code class="docutils literal notranslate"><span class="pre">"#RGB"</span></code>, 8 bit: <code class="docutils literal notranslate"><span class="pre">"#RRGGBB"</span></code>, 12 bit:
<code class="docutils literal notranslate"><span class="pre">"#RRRGGGBBB"</span></code>, or 16 bit: <code class="docutils literal notranslate"><span class="pre">"#RRRRGGGGBBBB"</span></code> ranges, where R,G,B here
represent any legal hex digit.  See page 160 of Ousterhout’s book for details.</p>
</dd>
<dt>cursor</dt><dd><p>The standard X cursor names from <code class="file docutils literal notranslate"><span class="pre">cursorfont.h</span></code> can be used, without the
<code class="docutils literal notranslate"><span class="pre">XC_</span></code> prefix.  For example to get a hand cursor (<code class="xref py py-const docutils literal notranslate"><span class="pre">XC_hand2</span></code>), use the
string <code class="docutils literal notranslate"><span class="pre">"hand2"</span></code>.  You can also specify a bitmap and mask file of your own.
See page 179 of Ousterhout’s book.</p>
</dd>
<dt>distance</dt><dd><p>Screen distances can be specified in either pixels or absolute distances.
Pixels are given as numbers and absolute distances as strings, with the trailing
character denoting units: <code class="docutils literal notranslate"><span class="pre">c</span></code> for centimetres, <code class="docutils literal notranslate"><span class="pre">i</span></code> for inches, <code class="docutils literal notranslate"><span class="pre">m</span></code> for
millimetres, <code class="docutils literal notranslate"><span class="pre">p</span></code> for printer’s points.  For example, 3.5 inches is expressed
as <code class="docutils literal notranslate"><span class="pre">"3.5i"</span></code>.</p>
</dd>
<dt>font</dt><dd><p>Tk uses a list font name format, such as <code class="docutils literal notranslate"><span class="pre">{courier</span> <span class="pre">10</span> <span class="pre">bold}</span></code>. Font sizes with
positive numbers are measured in points; sizes with negative numbers are
measured in pixels.</p>
</dd>
<dt>geometry</dt><dd><p>This is a string of the form <code class="docutils literal notranslate"><span class="pre">widthxheight</span></code>, where width and height are
measured in pixels for most widgets (in characters for widgets displaying text).
For example: <code class="docutils literal notranslate"><span class="pre">fred["geometry"]</span> <span class="pre">=</span> <span class="pre">"200x100"</span></code>.</p>
</dd>
<dt>justify</dt><dd><p>Legal values are the strings: <code class="docutils literal notranslate"><span class="pre">"left"</span></code>, <code class="docutils literal notranslate"><span class="pre">"center"</span></code>, <code class="docutils literal notranslate"><span class="pre">"right"</span></code>, and
<code class="docutils literal notranslate"><span class="pre">"fill"</span></code>.</p>
</dd>
<dt>region</dt><dd><p>This is a string with four space-delimited elements, each of which is a legal
distance (see above).  For example: <code class="docutils literal notranslate"><span class="pre">"2</span> <span class="pre">3</span> <span class="pre">4</span> <span class="pre">5"</span></code> and <code class="docutils literal notranslate"><span class="pre">"3i</span> <span class="pre">2i</span> <span class="pre">4.5i</span> <span class="pre">2i"</span></code> and
<code class="docutils literal notranslate"><span class="pre">"3c</span> <span class="pre">2c</span> <span class="pre">4c</span> <span class="pre">10.43c"</span></code>  are all legal regions.</p>
</dd>
<dt>relief</dt><dd><p>Determines what the border style of a widget will be.  Legal values are:
<code class="docutils literal notranslate"><span class="pre">"raised"</span></code>, <code class="docutils literal notranslate"><span class="pre">"sunken"</span></code>, <code class="docutils literal notranslate"><span class="pre">"flat"</span></code>, <code class="docutils literal notranslate"><span class="pre">"groove"</span></code>, and <code class="docutils literal notranslate"><span class="pre">"ridge"</span></code>.</p>
</dd>
<dt>scrollcommand</dt><dd><p>This is almost always the <code class="xref py py-meth docutils literal notranslate"><span class="pre">set()</span></code> method of some scrollbar widget, but can
be any widget method that takes a single argument.</p>
</dd>
<dt>wrap</dt><dd><p>Must be one of: <code class="docutils literal notranslate"><span class="pre">"none"</span></code>, <code class="docutils literal notranslate"><span class="pre">"char"</span></code>, or <code class="docutils literal notranslate"><span class="pre">"word"</span></code>.</p>
</dd>
</dl>
</section>
<section id="bindings-and-events">
<span id="id2"></span><h3>Bindings and Events<a class="headerlink" href="https://docs.python.org/3/library/tkinter.html?highlight=tkinter#bindings-and-events" title="Permalink to this headline">¶</a></h3>
<p id="index-5">The bind method from the widget command allows you to watch for certain events
and to have a callback function trigger when that event type occurs.  The form
of the bind method is:</p>
<div class="highlight-python3 notranslate" style="position: relative;"><div class="highlight"><pre><span></span><span class="k">def</span> <span class="nf">bind</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">sequence</span><span class="p">,</span> <span class="n">func</span><span class="p">,</span> <span class="n">add</span><span class="o">=</span><span class="s1">''</span><span class="p">):</span>
</pre></div>
</div>
<p>where:</p>
<dl class="simple">
<dt>sequence</dt><dd><p>is a string that denotes the target kind of event.  (See the
<em class="manpage"><a class="manpage reference external" href="https://manpages.debian.org/bind(3tk)">bind(3tk)</a></em> man page, and page 201 of John Ousterhout’s book,
<cite>Tcl and the Tk Toolkit (2nd edition)</cite>, for details).</p>
</dd>
<dt>func</dt><dd><p>is a Python function, taking one argument, to be invoked when the event occurs.
An Event instance will be passed as the argument. (Functions deployed this way
are commonly known as <em>callbacks</em>.)</p>
</dd>
<dt>add</dt><dd><p>is optional, either <code class="docutils literal notranslate"><span class="pre">''</span></code> or <code class="docutils literal notranslate"><span class="pre">'+'</span></code>.  Passing an empty string denotes that
this binding is to replace any other bindings that this event is associated
with.  Passing a <code class="docutils literal notranslate"><span class="pre">'+'</span></code> means that this function is to be added to the list
of functions bound to this event type.</p>
</dd>
</dl>
<p>For example:</p>
<div class="highlight-python3 notranslate" style="position: relative;"><div class="highlight"><pre><span></span><span class="k">def</span> <span class="nf">turn_red</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">event</span><span class="p">):</span>
    <span class="n">event</span><span class="o">.</span><span class="n">widget</span><span class="p">[</span><span class="s2">"activeforeground"</span><span class="p">]</span> <span class="o">=</span> <span class="s2">"red"</span>

<span class="bp">self</span><span class="o">.</span><span class="n">button</span><span class="o">.</span><span class="n">bind</span><span class="p">(</span><span class="s2">"&lt;Enter&gt;"</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">turn_red</span><span class="p">)</span>
</pre></div>
</div>
<p>Notice how the widget field of the event is being accessed in the
<code class="docutils literal notranslate"><span class="pre">turn_red()</span></code> callback.  This field contains the widget that caught the X
event.  The following table lists the other event fields you can access, and how
they are denoted in Tk, which can be useful when referring to the Tk man pages.</p>
<div class="responsive-table__container"><table class="docutils align-default">
<colgroup>
<col style="width: 8%">
<col style="width: 42%">
<col style="width: 8%">
<col style="width: 42%">
</colgroup>
<thead>
<tr class="row-odd"><th class="head"><p>Tk</p></th>
<th class="head"><p><span class="highlighted">Tkinter</span> Event Field</p></th>
<th class="head"><p>Tk</p></th>
<th class="head"><p><span class="highlighted">Tkinter</span> Event Field</p></th>
</tr>
</thead>
<tbody>
<tr class="row-even"><td><p>%f</p></td>
<td><p>focus</p></td>
<td><p>%A</p></td>
<td><p>char</p></td>
</tr>
<tr class="row-odd"><td><p>%h</p></td>
<td><p>height</p></td>
<td><p>%E</p></td>
<td><p>send_event</p></td>
</tr>
<tr class="row-even"><td><p>%k</p></td>
<td><p>keycode</p></td>
<td><p>%K</p></td>
<td><p>keysym</p></td>
</tr>
<tr class="row-odd"><td><p>%s</p></td>
<td><p>state</p></td>
<td><p>%N</p></td>
<td><p>keysym_num</p></td>
</tr>
<tr class="row-even"><td><p>%t</p></td>
<td><p>time</p></td>
<td><p>%T</p></td>
<td><p>type</p></td>
</tr>
<tr class="row-odd"><td><p>%w</p></td>
<td><p>width</p></td>
<td><p>%W</p></td>
<td><p>widget</p></td>
</tr>
<tr class="row-even"><td><p>%x</p></td>
<td><p>x</p></td>
<td><p>%X</p></td>
<td><p>x_root</p></td>
</tr>
<tr class="row-odd"><td><p>%y</p></td>
<td><p>y</p></td>
<td><p>%Y</p></td>
<td><p>y_root</p></td>
</tr>
</tbody>
</table></div>
</section>
<section id="the-index-parameter">
<h3>The index Parameter<a class="headerlink" href="https://docs.python.org/3/library/tkinter.html?highlight=tkinter#the-index-parameter" title="Permalink to this headline">¶</a></h3>
<p>A number of widgets require “index” parameters to be passed.  These are used to
point at a specific place in a Text widget, or to particular characters in an
Entry widget, or to particular menu items in a Menu widget.</p>
<dl class="simple">
<dt>Entry widget indexes (index, view index, etc.)</dt><dd><p>Entry widgets have options that refer to character positions in the text being
displayed.  You can use these <a class="reference internal" href="https://docs.python.org/3/library/tkinter.html?highlight=tkinter#module-tkinter" title="tkinter: Interface to Tcl/Tk for graphical user interfaces"><code class="xref py py-mod docutils literal notranslate"><span class="pre"><span class="highlighted">tkinter</span></span></code></a> functions to access these special
points in text widgets:</p>
</dd>
<dt>Text widget indexes</dt><dd><p>The index notation for Text widgets is very rich and is best described in the Tk
man pages.</p>
</dd>
<dt>Menu indexes (menu.invoke(), menu.entryconfig(), etc.)</dt><dd><p>Some options and methods for menus manipulate specific menu entries. Anytime a
menu index is needed for an option or a parameter, you may pass in:</p>
<ul class="simple">
<li><p>an integer which refers to the numeric position of the entry in the widget,
counted from the top, starting with 0;</p></li>
<li><p>the string <code class="docutils literal notranslate"><span class="pre">"active"</span></code>, which refers to the menu position that is currently
under the cursor;</p></li>
<li><p>the string <code class="docutils literal notranslate"><span class="pre">"last"</span></code> which refers to the last menu item;</p></li>
<li><p>An integer preceded by <code class="docutils literal notranslate"><span class="pre">@</span></code>, as in <code class="docutils literal notranslate"><span class="pre">@6</span></code>, where the integer is interpreted
as a y pixel coordinate in the menu’s coordinate system;</p></li>
<li><p>the string <code class="docutils literal notranslate"><span class="pre">"none"</span></code>, which indicates no menu entry at all, most often used
with menu.activate() to deactivate all entries, and finally,</p></li>
<li><p>a text string that is pattern matched against the label of the menu entry, as
scanned from the top of the menu to the bottom.  Note that this index type is
considered after all the others, which means that matches for menu items
labelled <code class="docutils literal notranslate"><span class="pre">last</span></code>, <code class="docutils literal notranslate"><span class="pre">active</span></code>, or <code class="docutils literal notranslate"><span class="pre">none</span></code> may be interpreted as the above
literals, instead.</p></li>
</ul>
</dd>
</dl>
</section>
<section id="images">
<h3>Images<a class="headerlink" href="https://docs.python.org/3/library/tkinter.html?highlight=tkinter#images" title="Permalink to this headline">¶</a></h3>
<p>Images of different formats can be created through the corresponding subclass
of <code class="xref py py-class docutils literal notranslate"><span class="pre"><span class="highlighted">tkinter</span>.Image</span></code>:</p>
<ul class="simple">
<li><p><code class="xref py py-class docutils literal notranslate"><span class="pre">BitmapImage</span></code> for images in XBM format.</p></li>
<li><p><code class="xref py py-class docutils literal notranslate"><span class="pre">PhotoImage</span></code> for images in PGM, PPM, GIF and PNG formats. The latter
is supported starting with Tk 8.6.</p></li>
</ul>
<p>Either type of image is created through either the <code class="docutils literal notranslate"><span class="pre">file</span></code> or the <code class="docutils literal notranslate"><span class="pre">data</span></code>
option (other options are available as well).</p>
<p>The image object can then be used wherever an <code class="docutils literal notranslate"><span class="pre">image</span></code> option is supported by
some widget (e.g. labels, buttons, menus). In these cases, Tk will not keep a
reference to the image. When the last Python reference to the image object is
deleted, the image data is deleted as well, and Tk will display an empty box
wherever the image was used.</p>
<div class="admonition seealso">
<p class="admonition-title">See also</p>
<p>The <a class="reference external" href="https://python-pillow.org/">Pillow</a> package adds support for
formats such as BMP, JPEG, TIFF, and WebP, among others.</p>
</div>
</section>
</section>
<section id="file-handlers">
<span id="tkinter-file-handlers"></span><h2>File Handlers<a class="headerlink" href="https://docs.python.org/3/library/tkinter.html?highlight=tkinter#file-handlers" title="Permalink to this headline">¶</a></h2>
<p>Tk allows you to register and unregister a callback function which will be
called from the Tk mainloop when I/O is possible on a file descriptor.
Only one handler may be registered per file descriptor. Example code:</p>
<div class="highlight-python3 notranslate" style="position: relative;"><div class="highlight"><pre><span></span><span class="kn">import</span> <span class="nn"><span class="highlighted">tkinter</span></span>
<span class="n">widget</span> <span class="o">=</span> <span class="n"><span class="highlighted">tkinter</span></span><span class="o">.</span><span class="n">Tk</span><span class="p">()</span>
<span class="n">mask</span> <span class="o">=</span> <span class="n"><span class="highlighted">tkinter</span></span><span class="o">.</span><span class="n">READABLE</span> <span class="o">|</span> <span class="n"><span class="highlighted">tkinter</span></span><span class="o">.</span><span class="n">WRITABLE</span>
<span class="n">widget</span><span class="o">.</span><span class="n">tk</span><span class="o">.</span><span class="n">createfilehandler</span><span class="p">(</span><span class="n">file</span><span class="p">,</span> <span class="n">mask</span><span class="p">,</span> <span class="n">callback</span><span class="p">)</span>
<span class="o">...</span>
<span class="n">widget</span><span class="o">.</span><span class="n">tk</span><span class="o">.</span><span class="n">deletefilehandler</span><span class="p">(</span><span class="n">file</span><span class="p">)</span>
</pre></div>
</div>
<p>This feature is not available on Windows.</p>
<p>Since you don’t know how many bytes are available for reading, you may not
want to use the <a class="reference internal" href="https://docs.python.org/3/library/io.html#io.BufferedIOBase" title="io.BufferedIOBase"><code class="xref py py-class docutils literal notranslate"><span class="pre">BufferedIOBase</span></code></a> or <a class="reference internal" href="https://docs.python.org/3/library/io.html#io.TextIOBase" title="io.TextIOBase"><code class="xref py py-class docutils literal notranslate"><span class="pre">TextIOBase</span></code></a>
<a class="reference internal" href="https://docs.python.org/3/library/io.html#io.BufferedIOBase.read" title="io.BufferedIOBase.read"><code class="xref py py-meth docutils literal notranslate"><span class="pre">read()</span></code></a> or <a class="reference internal" href="https://docs.python.org/3/library/io.html#io.IOBase.readline" title="io.IOBase.readline"><code class="xref py py-meth docutils literal notranslate"><span class="pre">readline()</span></code></a> methods,
since these will insist on reading a predefined number of bytes.
For sockets, the <a class="reference internal" href="https://docs.python.org/3/library/socket.html#socket.socket.recv" title="socket.socket.recv"><code class="xref py py-meth docutils literal notranslate"><span class="pre">recv()</span></code></a> or
<a class="reference internal" href="https://docs.python.org/3/library/socket.html#socket.socket.recvfrom" title="socket.socket.recvfrom"><code class="xref py py-meth docutils literal notranslate"><span class="pre">recvfrom()</span></code></a> methods will work fine; for other files,
use raw reads or <code class="docutils literal notranslate"><span class="pre">os.read(file.fileno(),</span> <span class="pre">maxbytecount)</span></code>.</p>
<dl class="py method">
<dt class="sig sig-object py" id="tkinter.Widget.tk.createfilehandler">
<span class="sig-prename descclassname"><span class="pre">Widget.tk.</span></span><span class="sig-name descname"><span class="pre">createfilehandler</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">file</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">mask</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">func</span></span></em><span class="sig-paren">)</span><a class="headerlink" href="https://docs.python.org/3/library/tkinter.html?highlight=tkinter#tkinter.Widget.tk.createfilehandler" title="Permalink to this definition">¶</a></dt>
<dd><p>Registers the file handler callback function <em>func</em>. The <em>file</em> argument
may either be an object with a <a class="reference internal" href="https://docs.python.org/3/library/io.html#io.IOBase.fileno" title="io.IOBase.fileno"><code class="xref py py-meth docutils literal notranslate"><span class="pre">fileno()</span></code></a> method (such as
a file or socket object), or an integer file descriptor. The <em>mask</em>
argument is an ORed combination of any of the three constants below.
The callback is called as follows:</p>
<div class="highlight-python3 notranslate" style="position: relative;"><div class="highlight"><pre><span></span><span class="n">callback</span><span class="p">(</span><span class="n">file</span><span class="p">,</span> <span class="n">mask</span><span class="p">)</span>
</pre></div>
</div>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="tkinter.Widget.tk.deletefilehandler">
<span class="sig-prename descclassname"><span class="pre">Widget.tk.</span></span><span class="sig-name descname"><span class="pre">deletefilehandler</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">file</span></span></em><span class="sig-paren">)</span><a class="headerlink" href="https://docs.python.org/3/library/tkinter.html?highlight=tkinter#tkinter.Widget.tk.deletefilehandler" title="Permalink to this definition">¶</a></dt>
<dd><p>Unregisters a file handler.</p>
</dd></dl>

<dl class="py data">
<dt class="sig sig-object py" id="tkinter.READABLE">
<span class="sig-prename descclassname"><span class="pre"><span class="highlighted">tkinter</span>.</span></span><span class="sig-name descname"><span class="pre">READABLE</span></span><a class="headerlink" href="https://docs.python.org/3/library/tkinter.html?highlight=tkinter#tkinter.READABLE" title="Permalink to this definition">¶</a></dt>
<dt class="sig sig-object py" id="tkinter.WRITABLE">
<span class="sig-prename descclassname"><span class="pre"><span class="highlighted">tkinter</span>.</span></span><span class="sig-name descname"><span class="pre">WRITABLE</span></span><a class="headerlink" href="https://docs.python.org/3/library/tkinter.html?highlight=tkinter#tkinter.WRITABLE" title="Permalink to this definition">¶</a></dt>
<dt class="sig sig-object py" id="tkinter.EXCEPTION">
<span class="sig-prename descclassname"><span class="pre"><span class="highlighted">tkinter</span>.</span></span><span class="sig-name descname"><span class="pre">EXCEPTION</span></span><a class="headerlink" href="https://docs.python.org/3/library/tkinter.html?highlight=tkinter#tkinter.EXCEPTION" title="Permalink to this definition">¶</a></dt>
<dd><p>Constants used in the <em>mask</em> arguments.</p>
</dd></dl>

</section>
</section>


            <div class="clearer"></div>
          </div>
        </div>
      </div>
      <div class="sphinxsidebar" role="navigation" aria-label="main navigation" style="">
        <div class="sphinxsidebarwrapper" style="float: left; margin-right: 0px; width: 217px;">
  <div>
    <h3><a href="https://docs.python.org/3/contents.html">Table of Contents</a></h3>
    <ul>
<li><a class="reference internal" href="https://docs.python.org/3/library/tkinter.html?highlight=tkinter#"><code class="xref py py-mod docutils literal notranslate"><span class="pre">tkinter</span></code> — Python interface to Tcl/Tk</a><ul>
<li><a class="reference internal" href="https://docs.python.org/3/library/tkinter.html?highlight=tkinter#architecture">Architecture</a></li>
<li><a class="reference internal" href="https://docs.python.org/3/library/tkinter.html?highlight=tkinter#tkinter-modules">Tkinter Modules</a></li>
<li><a class="reference internal" href="https://docs.python.org/3/library/tkinter.html?highlight=tkinter#tkinter-life-preserver">Tkinter Life Preserver</a><ul>
<li><a class="reference internal" href="https://docs.python.org/3/library/tkinter.html?highlight=tkinter#a-hello-world-program">A Hello World Program</a></li>
<li><a class="reference internal" href="https://docs.python.org/3/library/tkinter.html?highlight=tkinter#important-tk-concepts">Important Tk Concepts</a></li>
<li><a class="reference internal" href="https://docs.python.org/3/library/tkinter.html?highlight=tkinter#understanding-how-tkinter-wraps-tcl-tk">Understanding How Tkinter Wraps Tcl/Tk</a></li>
<li><a class="reference internal" href="https://docs.python.org/3/library/tkinter.html?highlight=tkinter#how-do-i-what-option-does">How do I…? What option does…?</a></li>
<li><a class="reference internal" href="https://docs.python.org/3/library/tkinter.html?highlight=tkinter#navigating-the-tcl-tk-reference-manual">Navigating the Tcl/Tk Reference Manual</a></li>
</ul>
</li>
<li><a class="reference internal" href="https://docs.python.org/3/library/tkinter.html?highlight=tkinter#threading-model">Threading model</a></li>
<li><a class="reference internal" href="https://docs.python.org/3/library/tkinter.html?highlight=tkinter#handy-reference">Handy Reference</a><ul>
<li><a class="reference internal" href="https://docs.python.org/3/library/tkinter.html?highlight=tkinter#setting-options">Setting Options</a></li>
<li><a class="reference internal" href="https://docs.python.org/3/library/tkinter.html?highlight=tkinter#the-packer">The Packer</a></li>
<li><a class="reference internal" href="https://docs.python.org/3/library/tkinter.html?highlight=tkinter#packer-options">Packer Options</a></li>
<li><a class="reference internal" href="https://docs.python.org/3/library/tkinter.html?highlight=tkinter#coupling-widget-variables">Coupling Widget Variables</a></li>
<li><a class="reference internal" href="https://docs.python.org/3/library/tkinter.html?highlight=tkinter#the-window-manager">The Window Manager</a></li>
<li><a class="reference internal" href="https://docs.python.org/3/library/tkinter.html?highlight=tkinter#tk-option-data-types">Tk Option Data Types</a></li>
<li><a class="reference internal" href="https://docs.python.org/3/library/tkinter.html?highlight=tkinter#bindings-and-events">Bindings and Events</a></li>
<li><a class="reference internal" href="https://docs.python.org/3/library/tkinter.html?highlight=tkinter#the-index-parameter">The index Parameter</a></li>
<li><a class="reference internal" href="https://docs.python.org/3/library/tkinter.html?highlight=tkinter#images">Images</a></li>
</ul>
</li>
<li><a class="reference internal" href="https://docs.python.org/3/library/tkinter.html?highlight=tkinter#file-handlers">File Handlers</a></li>
</ul>
</li>
</ul>

  </div>
  <div>
    <h4>Previous topic</h4>
    <p class="topless"><a href="https://docs.python.org/3/library/tk.html" title="previous chapter">Graphical User Interfaces with Tk</a></p>
  </div>
  <div>
    <h4>Next topic</h4>
    <p class="topless"><a href="https://docs.python.org/3/library/tkinter.colorchooser.html" title="next chapter"><code class="xref py py-mod docutils literal notranslate"><span class="pre">tkinter.colorchooser</span></code> — Color choosing dialog</a></p>
  </div>
  <div role="note" aria-label="source link">
    <h3>This Page</h3>
    <ul class="this-page-menu">
      <li><a href="https://docs.python.org/3/bugs.html">Report a Bug</a></li>
      <li>
        <a href="https://github.com/python/cpython/blob/main/Doc/library/tkinter.rst" rel="nofollow">Show Source
        </a>
      </li>
    </ul>
  </div>
        </div>
      <div id="sidebarbutton" title="Collapse sidebar" style="border-radius: 0px 5px 5px 0px; color: rgb(68, 68, 68); background-color: rgb(204, 204, 204); font-size: 1.2em; cursor: pointer; height: 100%; padding-left: 1px; margin-left: 218px;"><span style="display: block; position: fixed; top: 50%;">«</span></div></div>
      <div class="clearer"></div>
    </div>  
    <div class="related" role="navigation" aria-label="related navigation">
      <h3>Navigation</h3>
      <ul>
        <li class="right" style="margin-right: 10px">
          <a href="https://docs.python.org/3/genindex.html" title="General Index">index</a></li>
        <li class="right">
          <a href="https://docs.python.org/3/py-modindex.html" title="Python Module Index">modules</a> |</li>
        <li class="right">
          <a href="https://docs.python.org/3/library/tkinter.colorchooser.html" title="tkinter.colorchooser — Color choosing dialog">next</a> |</li>
        <li class="right">
          <a href="https://docs.python.org/3/library/tk.html" title="Graphical User Interfaces with Tk">previous</a> |</li>

          <li><img src="https://docs.python.org/3/_static/py.svg" alt="python logo" style="vertical-align: middle; margin-top: -1px"></li>
          <li><a href="https://www.python.org/">Python</a> »</li>
          <li class="switchers">
            <div class="language_switcher_placeholder"><select id="language_select"><option value="en" selected="selected">English</option><option value="es">Spanish</option><option value="fr">French</option><option value="ja">Japanese</option><option value="ko">Korean</option><option value="pt-br">Brazilian Portuguese</option><option value="zh-cn">Simplified Chinese</option><option value="zh-tw">Traditional Chinese</option></select></div>
            <div class="version_switcher_placeholder"><select id="version_select"><option value="3.12">dev (3.12)</option><option value="3.11" selected="selected">3.11.0</option><option value="3.10">3.10</option><option value="3.9">3.9</option><option value="3.8">3.8</option><option value="3.7">3.7</option><option value="3.6">3.6</option><option value="3.5">3.5</option><option value="2.7">2.7</option></select></div>
          </li>
          <li>
              
          </li>
    <li id="cpython-language-and-version">
      <a href="https://docs.python.org/3/index.html">3.11.0 Documentation</a> »
    </li>

          <li class="nav-item nav-item-1"><a href="https://docs.python.org/3/library/index.html">The Python Standard Library</a> »</li>
          <li class="nav-item nav-item-2"><a href="https://docs.python.org/3/library/tk.html">Graphical User Interfaces with Tk</a> »</li>
        <li class="nav-item nav-item-this"><a href="https://docs.python.org/3/library/tkinter.html?highlight=tkinter"><code class="xref py py-mod docutils literal notranslate"><span class="pre">tkinter</span></code> — Python interface to Tcl/Tk</a></li>
                <li class="right">
                    

    <div class="inline-search" role="search">
        <form class="inline-search" action="https://docs.python.org/3/search.html" method="get">
          <input placeholder="Quick search" aria-label="Quick search" type="text" name="q">
          <input type="submit" value="Go">
          
          
        </form>
    </div>
                     |
                </li>
            
      </ul>
    </div>  
    <div class="footer">
    © <a href="https://docs.python.org/3/copyright.html">Copyright</a> 2001-2022, Python Software Foundation.
    <br>
    This page is licensed under the Python Software Foundation License Version 2.
    <br>
    Examples, recipes, and other code in the documentation are additionally licensed under the Zero Clause BSD License.
    <br>
    See <a href="https://docs.python.org/license.html">History and License</a> for more information.<br>
    <br>

    The Python Software Foundation is a non-profit corporation.
<a href="https://www.python.org/psf/donations/">Please donate.</a>
<br>
    <br>

    Last updated on Dec 05, 2022.
    <a href="https://docs.python.org/bugs.html">Found a bug</a>?
    <br>

    Created using <a href="https://www.sphinx-doc.org/">Sphinx</a> 4.5.0.
    </div>

    
  
</body></html>
------MultipartBoundary--jn3eWeiLvD2ixPXlFYsITIejnqnAUyrqq9roiv0fbI----
Content-Type: text/css
Content-Transfer-Encoding: binary
Content-Location: cid:css-7965ee78-bd6e-4200-958e-c35cce4cafc3@mhtml.blink

@charset "utf-8";

@media only screen {
  table.full-width-table { width: 100%; }
}
------MultipartBoundary--jn3eWeiLvD2ixPXlFYsITIejnqnAUyrqq9roiv0fbI----
Content-Type: text/css
Content-Transfer-Encoding: binary
Content-Location: https://docs.python.org/3/_static/pygments.css

@charset "utf-8";

pre { line-height: 125%; }

td.linenos .normal { color: inherit; background-color: transparent; padding-left: 5px; padding-right: 5px; }

span.linenos { color: inherit; background-color: transparent; padding-left: 5px; padding-right: 5px; }

td.linenos .special { color: rgb(0, 0, 0); background-color: rgb(255, 255, 192); padding-left: 5px; padding-right: 5px; }

span.linenos.special { color: rgb(0, 0, 0); background-color: rgb(255, 255, 192); padding-left: 5px; padding-right: 5px; }

.highlight .hll { background-color: rgb(255, 255, 204); }

.highlight { background: rgb(248, 248, 248); }

.highlight .c { color: rgb(61, 123, 123); font-style: italic; }

.highlight .err { border: 1px solid rgb(255, 0, 0); }

.highlight .k { color: rgb(0, 128, 0); font-weight: bold; }

.highlight .o { color: rgb(102, 102, 102); }

.highlight .ch { color: rgb(61, 123, 123); font-style: italic; }

.highlight .cm { color: rgb(61, 123, 123); font-style: italic; }

.highlight .cp { color: rgb(156, 101, 0); }

.highlight .cpf { color: rgb(61, 123, 123); font-style: italic; }

.highlight .c1 { color: rgb(61, 123, 123); font-style: italic; }

.highlight .cs { color: rgb(61, 123, 123); font-style: italic; }

.highlight .gd { color: rgb(160, 0, 0); }

.highlight .ge { font-style: italic; }

.highlight .gr { color: rgb(228, 0, 0); }

.highlight .gh { color: rgb(0, 0, 128); font-weight: bold; }

.highlight .gi { color: rgb(0, 132, 0); }

.highlight .go { color: rgb(113, 113, 113); }

.highlight .gp { color: rgb(0, 0, 128); font-weight: bold; }

.highlight .gs { font-weight: bold; }

.highlight .gu { color: rgb(128, 0, 128); font-weight: bold; }

.highlight .gt { color: rgb(0, 68, 221); }

.highlight .kc { color: rgb(0, 128, 0); font-weight: bold; }

.highlight .kd { color: rgb(0, 128, 0); font-weight: bold; }

.highlight .kn { color: rgb(0, 128, 0); font-weight: bold; }

.highlight .kp { color: rgb(0, 128, 0); }

.highlight .kr { color: rgb(0, 128, 0); font-weight: bold; }

.highlight .kt { color: rgb(176, 0, 64); }

.highlight .m { color: rgb(102, 102, 102); }

.highlight .s { color: rgb(186, 33, 33); }

.highlight .na { color: rgb(104, 120, 34); }

.highlight .nb { color: rgb(0, 128, 0); }

.highlight .nc { color: rgb(0, 0, 255); font-weight: bold; }

.highlight .no { color: rgb(136, 0, 0); }

.highlight .nd { color: rgb(170, 34, 255); }

.highlight .ni { color: rgb(113, 113, 113); font-weight: bold; }

.highlight .ne { color: rgb(203, 63, 56); font-weight: bold; }

.highlight .nf { color: rgb(0, 0, 255); }

.highlight .nl { color: rgb(118, 118, 0); }

.highlight .nn { color: rgb(0, 0, 255); font-weight: bold; }

.highlight .nt { color: rgb(0, 128, 0); font-weight: bold; }

.highlight .nv { color: rgb(25, 23, 124); }

.highlight .ow { color: rgb(170, 34, 255); font-weight: bold; }

.highlight .w { color: rgb(187, 187, 187); }

.highlight .mb { color: rgb(102, 102, 102); }

.highlight .mf { color: rgb(102, 102, 102); }

.highlight .mh { color: rgb(102, 102, 102); }

.highlight .mi { color: rgb(102, 102, 102); }

.highlight .mo { color: rgb(102, 102, 102); }

.highlight .sa { color: rgb(186, 33, 33); }

.highlight .sb { color: rgb(186, 33, 33); }

.highlight .sc { color: rgb(186, 33, 33); }

.highlight .dl { color: rgb(186, 33, 33); }

.highlight .sd { color: rgb(186, 33, 33); font-style: italic; }

.highlight .s2 { color: rgb(186, 33, 33); }

.highlight .se { color: rgb(170, 93, 31); font-weight: bold; }

.highlight .sh { color: rgb(186, 33, 33); }

.highlight .si { color: rgb(164, 90, 119); font-weight: bold; }

.highlight .sx { color: rgb(0, 128, 0); }

.highlight .sr { color: rgb(164, 90, 119); }

.highlight .s1 { color: rgb(186, 33, 33); }

.highlight .ss { color: rgb(25, 23, 124); }

.highlight .bp { color: rgb(0, 128, 0); }

.highlight .fm { color: rgb(0, 0, 255); }

.highlight .vc { color: rgb(25, 23, 124); }

.highlight .vg { color: rgb(25, 23, 124); }

.highlight .vi { color: rgb(25, 23, 124); }

.highlight .vm { color: rgb(25, 23, 124); }

.highlight .il { color: rgb(102, 102, 102); }
------MultipartBoundary--jn3eWeiLvD2ixPXlFYsITIejnqnAUyrqq9roiv0fbI----
Content-Type: text/css
Content-Transfer-Encoding: binary
Content-Location: https://docs.python.org/3/_static/pydoctheme.css?2022.1

@charset "utf-8";

@import url("default.css");

body { background-color: white; margin-left: 1em; margin-right: 1em; }

.mobile-nav, .menu-wrapper { display: none; }

div.related { margin-bottom: 1.2em; padding: 0.5em 0px; border-bottom: 1px solid rgb(204, 204, 204); margin-top: 0.5em; }

div.related a:hover { color: rgb(0, 149, 196); }

div.related ~ div.related { border-top: 1px solid rgb(204, 204, 204); border-bottom: none; }

.related .switchers { display: inline-flex; }

.switchers > div { margin-right: 5px; }

.version_switcher_placeholder, .language_switcher_placeholder { padding-left: 5px; background-color: white; }

.inline-search { display: inline; }

form.inline-search input { display: inline; }

form.inline-search input[type="submit"] { width: 40px; }

div.document { display: flex; }

div.sphinxsidebar { float: none; position: sticky; top: 0px; max-height: 100vh; background-color: rgb(238, 238, 238); border-radius: 5px; line-height: 130%; font-size: smaller; }

div.sphinxsidebar h3, div.sphinxsidebar h4 { margin-top: 1.5em; }

div.sphinxsidebarwrapper { box-sizing: border-box; height: 100%; overflow: hidden auto; }

div.sphinxsidebarwrapper > h3:first-child { margin-top: 0.2em; }

div.sphinxsidebarwrapper > ul > li > ul > li { margin-bottom: 0.4em; }

div.sphinxsidebar a:hover { color: rgb(0, 149, 196); }

form.inline-search input, div.sphinxsidebar input { font-family: "Lucida Grande", Arial, sans-serif; border: 1px solid rgb(153, 153, 153); font-size: smaller; border-radius: 3px; }

div.sphinxsidebar input[type="text"] { max-width: 150px; }

div.body { padding: 0px 0px 0px 1.2em; }

div.body p, div.body dd, div.body li, div.body blockquote { text-align: left; line-height: 1.4; }

div.body h1, div.body h2, div.body h3, div.body h4, div.body h5, div.body h6 { margin: 0px; border: 0px; padding: 0.3em 0px; }

div.body hr { border: 0px; background-color: rgb(204, 204, 204); height: 1px; }

div.body pre { border-radius: 3px; border: 1px solid rgb(170, 204, 153); }

div.body div.admonition, div.body div.impl-detail { border-radius: 3px; }

div.body div.impl-detail > p { margin: 0px; }

div.body div.seealso { border: 1px solid rgb(221, 221, 102); }

div.body a { color: rgb(0, 114, 170); }

div.body a:visited { color: rgb(99, 99, 187); }

div.body a:hover { color: rgb(0, 176, 228); }

tt, code, pre { font-family: "monospace", monospace; font-size: 96.5%; }

div.body tt, div.body code { border-radius: 3px; }

div.body tt.descname, div.body code.descname { font-size: 120%; }

div.body tt.xref, div.body a tt, div.body code.xref, div.body a code { font-weight: normal; }

table.docutils { border: 1px solid rgb(221, 221, 221); min-width: 20%; border-radius: 3px; margin-top: 10px; margin-bottom: 10px; }

table.docutils td, table.docutils th { border-radius: 3px; border: 1px solid rgb(221, 221, 221) !important; }

table p, table li { text-align: left !important; }

table.docutils th { background-color: rgb(238, 238, 238); padding: 0.3em 0.5em; }

table.docutils td { background-color: white; padding: 0.3em 0.5em; }

table.footnote, table.footnote td { border: 0px !important; }

div.footer { line-height: 150%; margin-top: -2em; text-align: right; width: auto; margin-right: 10px; }

div.footer a:hover { color: rgb(0, 149, 196); }

.refcount { color: rgb(0, 102, 0); }

.stableabi { color: rgb(34, 34, 153); }

.highlight { background: none !important; }

dl > dt span ~ em { font-family: "monospace", monospace; }

.toctree-wrapper ul { padding-left: 20px; }

@media (max-width: 1023px) {
  div.body { min-width: 100%; padding: 0px; font-size: 0.875rem; }
  div.bodywrapper { margin: 0px; }
  div.body h1 { font-size: 1.625rem; }
  div.body h2 { font-size: 1.25rem; }
  div.body h3, div.body h4, div.body h5 { font-size: 1rem; }
  div.body ul { padding-inline-start: 1rem; }
  div.body blockquote { margin-inline: 1rem 0px; }
  div.related, .sphinxsidebar { display: none; }
  html { scroll-padding-top: 40px; }
  .mobile-nav { display: block; height: 40px; width: 100%; position: fixed; top: 0px; left: 0px; background-color: white; box-shadow: rgba(0, 0, 0, 0.25) 0px 0px 2px 0px; z-index: 1; }
  .mobile-nav * { box-sizing: border-box; }
  .nav-content { position: absolute; z-index: 2; left: 0px; top: 0px; height: 40px; width: 100%; max-width: 100vw; padding: 0px 1rem 0px 45px; display: flex; align-items: center; background-color: white; }
  .nav-logo { margin-right: 0.7rem; display: flex; flex: 0 0 auto; }
  .nav-content img { width: 20px; height: auto; }
  .version_switcher_placeholder { flex: 0 1 0px; margin-right: 1rem; }
  .nav-content .search { display: flex; flex: 1 1 auto; align-items: center; padding: 0px 0px 0px 2px; border: 1px solid rgb(169, 169, 169); height: 30px; overflow: hidden; }
  .nav-content .search:hover { box-shadow: rgba(32, 33, 36, 0.28) 0px 1px 6px 0px; border-color: rgba(223, 225, 229, 0); }
  .nav-content .search input[type="text"] { border: 0px; outline: 0px; box-shadow: none; width: 40px; height: 28px; flex: 1 1 auto; }
  .nav-content .search input[type="submit"] { height: 100%; appearance: none; border-width: 1px; border-style: solid; border-color: transparent transparent transparent rgb(169, 169, 169); border-image: initial; box-shadow: none; cursor: pointer; background-color: rgb(240, 240, 240); margin-right: 0px; }
  .nav-content .search input[type="submit"]:hover { border-color: rgb(169, 169, 169); }
  .nav-content .search svg { flex: 0 0 20px; fill: rgb(51, 51, 51); }
  .toggler__input { width: 40px; height: 40px; left: 0px; opacity: 0; position: absolute; z-index: 3; margin: 0px; }
  .toggler__label { width: 40px; height: 40px; margin: 0px; position: absolute; cursor: pointer; top: 0px; left: 0px; background-color: transparent; border: 1px solid white; box-shadow: none; z-index: 3; display: flex; align-items: center; justify-content: center; padding: 0px 8px; }
  .toggler__label:focus { background-color: rgb(238, 238, 238); border: 1px solid rgb(237, 237, 237); box-shadow: rgba(0, 0, 0, 0.25) 1px 0px 2px 0px; }
  .toggler__label:hover { background-color: rgb(238, 238, 238); border: 1px solid rgb(237, 237, 237); box-shadow: rgba(0, 0, 0, 0.25) 1px 0px 2px 0px; }
  .toggler__label > span { position: relative; flex: 0 0 auto; height: 2px; width: 100%; background: rgb(68, 68, 68); transition: all 400ms ease 0s; }
  .toggler__label > span::before, .toggler__label > span::after { content: ""; height: 2px; width: 100%; background: inherit; position: absolute; left: 0px; top: -8px; }
  .toggler__label > span::after { top: 8px; }
  .toggler__input:checked ~ .toggler__label span { transform: rotate(135deg); }
  .toggler__input:checked ~ .toggler__label span::before { transform: rotate(90deg); }
  .toggler__input:checked ~ .toggler__label span::before, .toggler__input:checked ~ .toggler__label span::after { top: 0px; }
  .toggler__input:checked:hover ~ .toggler__label span { transform: rotate(315deg); }
  .toggler__input:checked ~ .menu-wrapper { visibility: visible; left: 0px; }
  .menu-wrapper { display: block; position: fixed; top: 0px; transition: left 400ms ease 0s; left: -310px; width: 300px; height: 100%; background-color: rgb(238, 238, 238); box-shadow: rgba(0, 0, 0, 0.2) 0px 0px 10px; overflow-y: auto; }
  .menu-wrapper.open { visibility: visible; left: 0px; }
  .menu { padding: 40px 10px 30px 20px; }
  .menu-wrapper h3, .menu-wrapper h4 { margin-bottom: 0px; font-weight: normal; }
  .menu-wrapper h4 { font-size: 1.3em; }
  .menu-wrapper h3 { color: rgb(68, 68, 68); font-size: 1.4em; }
  .menu-wrapper h3 + p, .menu-wrapper h4 + p { margin-top: 0.5rem; }
  .menu a { font-size: smaller; color: rgb(68, 68, 68); text-decoration: none; }
  .menu ul { list-style: none; line-height: 1.4; overflow-wrap: break-word; padding-left: 0px; }
  .menu ul ul { margin-left: 20px; list-style: square; }
  .menu ul li { margin-bottom: 0.5rem; }
  .language_switcher_placeholder, .version_switcher_placeholder { position: relative; border: 1px solid rgb(168, 168, 168); height: 30px; padding-right: 7px; }
  .language_switcher_placeholder { margin-top: 2rem; }
  .language_switcher_placeholder::after, .version_switcher_placeholder::after { content: url("../_static/caret-down.svg"); position: absolute; top: 7px; width: 15px; height: 15px; right: 0px; pointer-events: none; }
  .language_switcher_placeholder select, .version_switcher_placeholder select { appearance: none; border: 0px; height: 100%; background-color: white; }
  .language_switcher_placeholder:focus-visible, .version_switcher_placeholder:focus-visible { outline-offset: 5px; }
  .language_switcher_placeholder select { width: 100%; }
  .document { padding-top: 40px; position: relative; z-index: 0; }
  .responsive-table__container { width: 100%; overflow-x: auto; }
}
------MultipartBoundary--jn3eWeiLvD2ixPXlFYsITIejnqnAUyrqq9roiv0fbI----
Content-Type: text/css
Content-Transfer-Encoding: binary
Content-Location: https://docs.python.org/3/_static/default.css

@charset "utf-8";

@import url("classic.css");
------MultipartBoundary--jn3eWeiLvD2ixPXlFYsITIejnqnAUyrqq9roiv0fbI----
Content-Type: text/css
Content-Transfer-Encoding: binary
Content-Location: https://docs.python.org/3/_static/classic.css

@charset "utf-8";

@import url("basic.css");

html { background-color: rgb(255, 255, 255); }

body { font-family: "Lucida Grande", Arial, sans-serif; font-size: 100%; background-color: white; color: rgb(0, 0, 0); margin: 0px; padding: 0px; }

div.document { background-color: white; }

div.documentwrapper { float: left; width: 100%; }

div.bodywrapper { margin: 0px 0px 0px 230px; }

div.body { background-color: white; color: rgb(34, 34, 34); padding: 0px 20px 30px; }

div.footer { color: rgb(85, 85, 85); width: 100%; padding: 9px 0px; text-align: center; font-size: 75%; }

div.footer a { color: rgb(85, 85, 85); text-decoration: underline; }

div.related { background-color: white; line-height: 30px; color: rgb(102, 102, 102); }

div.related a { color: rgb(68, 68, 68); }

div.sphinxsidebar { }

div.sphinxsidebar h3 { font-family: "Lucida Grande", Arial, sans-serif; color: rgb(68, 68, 68); font-size: 1.4em; font-weight: normal; margin: 0px; padding: 0px; }

div.sphinxsidebar h3 a { color: rgb(68, 68, 68); }

div.sphinxsidebar h4 { font-family: "Lucida Grande", Arial, sans-serif; color: rgb(68, 68, 68); font-size: 1.3em; font-weight: normal; margin: 5px 0px 0px; padding: 0px; }

div.sphinxsidebar p { color: rgb(68, 68, 68); }

div.sphinxsidebar p.topless { margin: 5px 10px 10px; }

div.sphinxsidebar ul { margin: 10px; padding: 0px; color: rgb(68, 68, 68); }

div.sphinxsidebar a { color: rgb(68, 68, 68); }

div.sphinxsidebar input { border: 1px solid rgb(68, 68, 68); font-family: sans-serif; font-size: 1em; }

div#sidebarbutton { background-color: rgb(60, 110, 131); }

a { color: rgb(0, 144, 192); text-decoration: none; }

a:visited { color: rgb(0, 96, 143); text-decoration: none; }

a:hover { text-decoration: underline; }

div.body h1, div.body h2, div.body h3, div.body h4, div.body h5, div.body h6 { font-family: "Lucida Grande", Arial, sans-serif; background-color: white; font-weight: normal; color: rgb(26, 26, 26); border-bottom: 1px solid rgb(204, 204, 204); margin: 20px -20px 10px; padding: 3px 0px 3px 10px; }

div.body h1 { margin-top: 0px; font-size: 200%; }

div.body h2 { font-size: 160%; }

div.body h3 { font-size: 140%; }

div.body h4 { font-size: 120%; }

div.body h5 { font-size: 110%; }

div.body h6 { font-size: 100%; }

a.headerlink { color: rgb(170, 170, 170); font-size: 0.8em; padding: 0px 4px; text-decoration: none; }

a.headerlink:hover { background-color: rgb(170, 170, 170); color: white; }

div.body p, div.body dd, div.body li, div.body blockquote { text-align: justify; line-height: 130%; }

div.admonition p.admonition-title + p { display: inline; }

div.admonition p { margin-bottom: 5px; }

div.admonition pre { margin-bottom: 5px; }

div.admonition ul, div.admonition ol { margin-bottom: 5px; }

div.note { background-color: rgb(238, 238, 238); border: 1px solid rgb(204, 204, 204); }

div.seealso { background-color: rgb(255, 255, 204); border: 1px solid rgb(255, 255, 102); }

div.topic { background-color: rgb(238, 238, 238); }

div.warning { background-color: rgb(255, 228, 228); border: 1px solid rgb(255, 102, 102); }

p.admonition-title { display: inline; }

p.admonition-title::after { content: ":"; }

pre { padding: 5px; background-color: rgb(238, 255, 204); color: rgb(51, 51, 51); line-height: 120%; border-top: 1px solid rgb(170, 204, 153); border-bottom: 1px solid rgb(170, 204, 153); border-image: initial; border-left: none; border-right: none; }

code { background-color: rgb(236, 240, 243); padding: 0px 1px; font-size: 0.95em; }

th, dl.field-list > dt { background-color: rgb(238, 221, 238); }

.warning code { background: rgb(239, 194, 194); }

.note code { background: rgb(214, 214, 214); }

.viewcode-back { font-family: "Lucida Grande", Arial, sans-serif; }

div.viewcode-block:target { background-color: rgb(244, 222, 191); border-top: 1px solid rgb(170, 204, 153); border-bottom: 1px solid rgb(170, 204, 153); }

div.code-block-caption { color: rgb(239, 239, 239); background-color: rgb(28, 78, 99); }
------MultipartBoundary--jn3eWeiLvD2ixPXlFYsITIejnqnAUyrqq9roiv0fbI----
Content-Type: text/css
Content-Transfer-Encoding: binary
Content-Location: https://docs.python.org/3/_static/basic.css

@charset "utf-8";

div.clearer { clear: both; }

div.section::after { display: block; content: ""; clear: left; }

div.related { width: 100%; font-size: 90%; }

div.related h3 { display: none; }

div.related ul { margin: 0px; padding: 0px 0px 0px 10px; list-style: none; }

div.related li { display: inline; }

div.related li.right { float: right; margin-right: 5px; }

div.sphinxsidebarwrapper { padding: 10px 5px 0px 10px; }

div.sphinxsidebar { float: left; width: 230px; margin-left: -100%; font-size: 90%; overflow-wrap: break-word; }

div.sphinxsidebar ul { list-style: none; }

div.sphinxsidebar ul ul, div.sphinxsidebar ul.want-points { margin-left: 20px; list-style: square; }

div.sphinxsidebar ul ul { margin-top: 0px; margin-bottom: 0px; }

div.sphinxsidebar form { margin-top: 10px; }

div.sphinxsidebar input { border: 1px solid rgb(152, 219, 204); font-family: sans-serif; font-size: 1em; }

div.sphinxsidebar #searchbox form.search { overflow: hidden; }

div.sphinxsidebar #searchbox input[type="text"] { float: left; width: 80%; padding: 0.25em; box-sizing: border-box; }

div.sphinxsidebar #searchbox input[type="submit"] { float: left; width: 20%; border-left: none; padding: 0.25em; box-sizing: border-box; }

img { border: 0px; max-width: 100%; }

ul.search { margin: 10px 0px 0px 20px; padding: 0px; }

ul.search li { padding: 5px 0px 5px 20px; background-image: url("file.png"); background-repeat: no-repeat; background-position: 0px 7px; }

ul.search li a { font-weight: bold; }

ul.search li p.context { color: rgb(136, 136, 136); margin: 2px 0px 0px 30px; text-align: left; }

ul.keywordmatches li.goodmatch a { font-weight: bold; }

table.contentstable { width: 90%; margin-left: auto; margin-right: auto; }

table.contentstable p.biglink { line-height: 150%; }

a.biglink { font-size: 1.3em; }

span.linkdescr { font-style: italic; padding-top: 5px; font-size: 90%; }

table.indextable { width: 100%; }

table.indextable td { text-align: left; vertical-align: top; }

table.indextable ul { margin-top: 0px; margin-bottom: 0px; list-style-type: none; }

table.indextable > tbody > tr > td > ul { padding-left: 0em; }

table.indextable tr.pcap { height: 10px; }

table.indextable tr.cap { margin-top: 10px; background-color: rgb(242, 242, 242); }

img.toggler { margin-right: 3px; margin-top: 3px; cursor: pointer; }

div.modindex-jumpbox { border-top: 1px solid rgb(221, 221, 221); border-bottom: 1px solid rgb(221, 221, 221); margin: 1em 0px; padding: 0.4em; }

div.genindex-jumpbox { border-top: 1px solid rgb(221, 221, 221); border-bottom: 1px solid rgb(221, 221, 221); margin: 1em 0px; padding: 0.4em; }

table.modindextable td { padding: 2px; border-collapse: collapse; }

div.body { min-width: 450px; max-width: 800px; }

div.body p, div.body dd, div.body li, div.body blockquote { hyphens: auto; }

a.headerlink { visibility: hidden; }

a.brackets::before, span.brackets > a::before { content: "["; }

a.brackets::after, span.brackets > a::after { content: "]"; }

h1:hover > a.headerlink, h2:hover > a.headerlink, h3:hover > a.headerlink, h4:hover > a.headerlink, h5:hover > a.headerlink, h6:hover > a.headerlink, dt:hover > a.headerlink, caption:hover > a.headerlink, p.caption:hover > a.headerlink, div.code-block-caption:hover > a.headerlink { visibility: visible; }

div.body p.caption { text-align: inherit; }

div.body td { text-align: left; }

.first { margin-top: 0px !important; }

p.rubric { margin-top: 30px; font-weight: bold; }

img.align-left, figure.align-left, .figure.align-left, object.align-left { clear: left; float: left; margin-right: 1em; }

img.align-right, figure.align-right, .figure.align-right, object.align-right { clear: right; float: right; margin-left: 1em; }

img.align-center, figure.align-center, .figure.align-center, object.align-center { display: block; margin-left: auto; margin-right: auto; }

img.align-default, figure.align-default, .figure.align-default { display: block; margin-left: auto; margin-right: auto; }

.align-left { text-align: left; }

.align-center { text-align: center; }

.align-default { text-align: center; }

.align-right { text-align: right; }

div.sidebar, aside.sidebar { margin: 0px 0px 0.5em 1em; border: 1px solid rgb(221, 221, 187); padding: 7px; background-color: rgb(255, 255, 238); width: 40%; float: right; clear: right; overflow-x: auto; }

p.sidebar-title { font-weight: bold; }

div.admonition, div.topic, blockquote { clear: left; }

div.topic { border: 1px solid rgb(204, 204, 204); padding: 7px; margin: 10px 0px; }

p.topic-title { font-size: 1.1em; font-weight: bold; margin-top: 10px; }

div.admonition { margin-top: 10px; margin-bottom: 10px; padding: 7px; }

div.admonition dt { font-weight: bold; }

p.admonition-title { margin: 0px 10px 5px 0px; font-weight: bold; }

div.body p.centered { text-align: center; margin-top: 25px; }

div.sidebar > :last-child, aside.sidebar > :last-child, div.topic > :last-child, div.admonition > :last-child { margin-bottom: 0px; }

div.sidebar::after, aside.sidebar::after, div.topic::after, div.admonition::after, blockquote::after { display: block; content: ""; clear: both; }

table.docutils { margin-top: 10px; margin-bottom: 10px; border: 0px; border-collapse: collapse; }

table.align-center { margin-left: auto; margin-right: auto; }

table.align-default { margin-left: auto; margin-right: auto; }

table caption span.caption-number { font-style: italic; }

table caption span.caption-text { }

table.docutils td, table.docutils th { padding: 1px 8px 1px 5px; border-width: 0px 0px 1px; border-top-style: initial; border-top-color: initial; border-left-style: initial; border-left-color: initial; border-right-style: initial; border-right-color: initial; border-bottom-style: solid; border-bottom-color: rgb(170, 170, 170); }

table.footnote td, table.footnote th { border: 0px !important; }

th { text-align: left; padding-right: 5px; }

table.citation { border-left: 1px solid gray; margin-left: 1px; }

table.citation td { border-bottom: none; }

th > :first-child, td > :first-child { margin-top: 0px; }

th > :last-child, td > :last-child { margin-bottom: 0px; }

div.figure, figure { margin: 0.5em; padding: 0.5em; }

div.figure p.caption, figcaption { padding: 0.3em; }

div.figure p.caption span.caption-number, figcaption span.caption-number { font-style: italic; }

div.figure p.caption span.caption-text, figcaption span.caption-text { }

table.field-list td, table.field-list th { border: 0px !important; }

.field-list ul { margin: 0px; padding-left: 1em; }

.field-list p { margin: 0px; }

.field-name { hyphens: manual; }

table.hlist { margin: 1em 0px; }

table.hlist td { vertical-align: top; }

.sig { font-family: Consolas, Menlo, "DejaVu Sans Mono", "Bitstream Vera Sans Mono", monospace; }

.sig-name, code.descname { background-color: transparent; font-weight: bold; }

.sig-name { font-size: 1.1em; }

code.descname { font-size: 1.2em; }

.sig-prename, code.descclassname { background-color: transparent; }

.optional { font-size: 1.3em; }

.sig-paren { font-size: larger; }

.sig-param.n { font-style: italic; }

.sig-inline.c-texpr, .sig-inline.cpp-texpr { font-family: unset; }

.sig.c .k, .sig.c .kt, .sig.cpp .k, .sig.cpp .kt { color: rgb(0, 51, 179); }

.sig.c .m, .sig.cpp .m { color: rgb(23, 80, 235); }

.sig.c .s, .sig.c .sc, .sig.cpp .s, .sig.cpp .sc { color: rgb(6, 125, 23); }

ol.arabic { list-style: decimal; }

ol.loweralpha { list-style: lower-alpha; }

ol.upperalpha { list-style: upper-alpha; }

ol.lowerroman { list-style: lower-roman; }

ol.upperroman { list-style: upper-roman; }

:not(li) > ol > li:first-child > :first-child, :not(li) > ul > li:first-child > :first-child { margin-top: 0px; }

:not(li) > ol > li:last-child > :last-child, :not(li) > ul > li:last-child > :last-child { margin-bottom: 0px; }

ol.simple ol p, ol.simple ul p, ul.simple ol p, ul.simple ul p { margin-top: 0px; }

ol.simple > li:not(:first-child) > p, ul.simple > li:not(:first-child) > p { margin-top: 0px; }

ol.simple p, ul.simple p { margin-bottom: 0px; }

dl.footnote > dt, dl.citation > dt { float: left; margin-right: 0.5em; }

dl.footnote > dd, dl.citation > dd { margin-bottom: 0em; }

dl.footnote > dd::after, dl.citation > dd::after { content: ""; clear: both; }

dl.field-list { display: grid; grid-template-columns: fit-content(30%) auto; }

dl.field-list > dt { font-weight: bold; word-break: break-word; padding-left: 0.5em; padding-right: 5px; }

dl.field-list > dt::after { content: ":"; }

dl.field-list > dd { padding-left: 0.5em; margin-top: 0em; margin-left: 0em; margin-bottom: 0em; }

dl { margin-bottom: 15px; }

dd > :first-child { margin-top: 0px; }

dd ul, dd table { margin-bottom: 10px; }

dd { margin-top: 3px; margin-bottom: 10px; margin-left: 30px; }

dl > dd:last-child, dl > dd:last-child > :last-child { margin-bottom: 0px; }

dt:target, span.highlighted { background-color: rgb(251, 229, 78); }

rect.highlighted { fill: rgb(251, 229, 78); }

dl.glossary dt { font-weight: bold; font-size: 1.1em; }

.versionmodified { font-style: italic; }

.system-message { background-color: rgb(255, 221, 170); padding: 5px; border: 3px solid red; }

.footnote:target { background-color: rgb(255, 255, 170); }

.line-block { display: block; margin-top: 1em; margin-bottom: 1em; }

.line-block .line-block { margin-top: 0px; margin-bottom: 0px; margin-left: 1.5em; }

.guilabel, .menuselection { font-family: sans-serif; }

.accelerator { text-decoration: underline; }

.classifier { font-style: oblique; }

.classifier::before { font-style: normal; margin: 0px 0.5em; content: ":"; display: inline-block; }

abbr, acronym { border-bottom: 1px dotted; cursor: help; }

pre { overflow: auto hidden; }

pre, div[class*="highlight-"] { clear: both; }

span.pre { hyphens: none; white-space: nowrap; }

div[class*="highlight-"] { margin: 1em 0px; }

td.linenos pre { border: 0px; background-color: transparent; color: rgb(170, 170, 170); }

table.highlighttable { display: block; }

table.highlighttable tbody { display: block; }

table.highlighttable tr { display: flex; }

table.highlighttable td { margin: 0px; padding: 0px; }

table.highlighttable td.linenos { padding-right: 0.5em; }

table.highlighttable td.code { flex: 1 1 0%; overflow: hidden; }

.highlight .hll { display: block; }

div.highlight pre, table.highlighttable pre { margin: 0px; }

div.code-block-caption + div { margin-top: 0px; }

div.code-block-caption { margin-top: 1em; padding: 2px 5px; font-size: small; }

div.code-block-caption code { background-color: transparent; }

table.highlighttable td.linenos, span.linenos, div.highlight span.gp { user-select: none; }

div.code-block-caption span.caption-number { padding: 0.1em 0.3em; font-style: italic; }

div.code-block-caption span.caption-text { }

div.literal-block-wrapper { margin: 1em 0px; }

code.xref, a code { background-color: transparent; font-weight: bold; }

h1 code, h2 code, h3 code, h4 code, h5 code, h6 code { background-color: transparent; }

.viewcode-link { float: right; }

.viewcode-back { float: right; font-family: sans-serif; }

div.viewcode-block:target { margin: -1px -10px; padding: 0px 10px; }

img.math { vertical-align: middle; }

div.body div.math p { text-align: center; }

span.eqno { float: right; }

span.eqno a.headerlink { position: absolute; z-index: 1; }

div.math:hover a.headerlink { visibility: visible; }

@media print {
  div.document, div.documentwrapper, div.bodywrapper { width: 100%; margin: 0px !important; }
  div.sphinxsidebar, div.related, div.footer, #top-link { display: none; }
}
------MultipartBoundary--jn3eWeiLvD2ixPXlFYsITIejnqnAUyrqq9roiv0fbI----
Content-Type: image/svg+xml
Content-Transfer-Encoding: binary
Content-Location: https://docs.python.org/3/_static/caret-down.svg

<svg viewBox="0 0 30 30" xmlns="http://www.w3.org/2000/svg"><path d="M7.45896 11.25H22.5351c1.043 0 1.5645 1.2598.8262 1.998l-7.5352 7.5411c-.457.457-1.2011.457-1.6582 0L6.63279 13.248c-.73828-.7382-.2168-1.998.82617-1.998z" fill="#444"/></svg>

------MultipartBoundary--jn3eWeiLvD2ixPXlFYsITIejnqnAUyrqq9roiv0fbI----
Content-Type: image/svg+xml
Content-Transfer-Encoding: binary
Content-Location: https://docs.python.org/3/_static/py.svg

<svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M7.90472 0.00013087C7.24498 0.00316295 6.61493 0.0588153 6.06056 0.15584C4.42744 0.441207 4.13093 1.0385 4.13093 2.14002V3.59479H7.99018V4.07971H4.13093H2.68259C1.56098 4.07971 0.578874 4.7465 0.271682 6.01495C-0.0826595 7.4689 -0.0983765 8.37618 0.271682 9.89434C0.546011 11.0244 1.20115 11.8296 2.32275 11.8296H3.64965V10.0856C3.64965 8.82574 4.75178 7.71441 6.06056 7.71441H9.91531C10.9883 7.71441 11.8449 6.84056 11.8449 5.77472V2.14002C11.8449 1.10556 10.9626 0.328486 9.91531 0.15584C9.25235 0.046687 8.56447 -0.00290121 7.90472 0.00013087ZM5.81767 1.17017C6.2163 1.17017 6.54184 1.49742 6.54184 1.89978C6.54184 2.30072 6.2163 2.62494 5.81767 2.62494C5.41761 2.62494 5.0935 2.30072 5.0935 1.89978C5.0935 1.49742 5.41761 1.17017 5.81767 1.17017Z" fill="url(#paint0_linear)"/>
<path d="M12.3262 4.07971V5.77472C12.3262 7.08883 11.1998 8.19488 9.9153 8.19488H6.06055C5.00466 8.19488 4.13092 9.0887 4.13092 10.1346V13.7693C4.13092 14.8037 5.04038 15.4122 6.06055 15.709C7.28217 16.0642 8.45364 16.1285 9.9153 15.709C10.8869 15.4307 11.8449 14.8708 11.8449 13.7693V12.3145H7.99017V11.8296H11.8449H13.7746C14.8962 11.8296 15.3141 11.0558 15.7042 9.89434C16.1071 8.69865 16.09 7.5488 15.7042 6.01495C15.427 4.91058 14.8976 4.07971 13.7746 4.07971H12.3262ZM10.1582 13.2843C10.5583 13.2843 10.8824 13.6086 10.8824 14.0095C10.8824 14.4119 10.5583 14.7391 10.1582 14.7391C9.75955 14.7391 9.43402 14.4119 9.43402 14.0095C9.43402 13.6086 9.75955 13.2843 10.1582 13.2843Z" fill="url(#paint1_linear)"/>
<defs>
<linearGradient id="paint0_linear" x1="1.25961e-08" y1="1.08223e-08" x2="8.81664" y2="7.59597" gradientUnits="userSpaceOnUse">
<stop stop-color="#5A9FD4"/>
<stop offset="1" stop-color="#306998"/>
</linearGradient>
<linearGradient id="paint1_linear" x1="10.0654" y1="13.8872" x2="6.91912" y2="9.42957" gradientUnits="userSpaceOnUse">
<stop stop-color="#FFD43B"/>
<stop offset="1" stop-color="#FFE873"/>
</linearGradient>
</defs>
</svg>

------MultipartBoundary--jn3eWeiLvD2ixPXlFYsITIejnqnAUyrqq9roiv0fbI------
